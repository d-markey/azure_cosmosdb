<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2023-06-08" filename="cross_partition_batch.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.95348835" lines-covered="41" lines-valid="43" package="/batch" testname="lcov.info" version="1.5">
<lines>
<line>
<code>import '../_internal/_linq_extensions.dart';</code>
</line>
<line>
<code>import '../cosmos_db_container.dart';</code>
</line>
<line>
<code>import '../cosmos_db_exceptions.dart';</code>
</line>
<line>
<code>import '../partition/partition_key.dart';</code>
</line>
<line>
<code>import '../permissions/cosmos_db_permission.dart';</code>
</line>
<line>
<code>import 'batch.dart';</code>
</line>
<line>
<code>import 'batch_operation.dart';</code>
</line>
<line>
<code>import 'batch_response.dart';</code>
</line>
<line>
<code>import 'transactional_batch.dart';</code>
</line>
<line>
<code/>
</line>
<line>
<code>/// A cross-partition transactional batch. This class can handle operations targetting</code>
</line>
<line>
<code>/// multiple partition keys, and supports more than 100 operations. Atomic behavior is</code>
</line>
<line>
<code>/// not possible with this class, and [isAtomic] will always be `false`. Stopping on</code>
</line>
<line>
<code>/// error is also not possible with this implementation and [continueOnError] will</code>
</line>
<line>
<code>/// always be `true`.</code>
</line>
<line>
<code>class CrossPartitionBatch extends Batch {</code>
</line>
<line hits="2">
<code>  CrossPartitionBatch(CosmosDbContainer container, {PartitionKey? partitionKey})</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      : super(container, partitionKey);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Cross-partition batches always have [continueOnError] = `true`.</code>
</line>
<line>
<code>  @override</code>
</line>
<line>
<code>  final bool continueOnError = true;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Cross-partition batches cannot be atomic and always have [isAtomic] = `false`.</code>
</line>
<line>
<code>  @override</code>
</line>
<line>
<code>  final bool isAtomic = false;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  @override</code>
</line>
<line>
<code>  final bool isCrossPartition = true;</code>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  @override</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>  int get length =&gt; _ops.length;</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  @override</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>  Iterable&lt;BatchOperation&gt; get operations =&gt; _ops.asIterable();</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  final _ops = &lt;BatchOperation&gt;[];</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  final _opsByPk = &lt;PartitionKey, TransactionalBatch&gt;{};</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  @override</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  void recycle() {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>    _ops.clear();</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>    _opsByPk.clear();</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  @override</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  void add(BatchOperation op) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    final pk = op.partitionKey ?? partitionKey;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    if (pk == null) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="0">
<code>      throw PartitionKeyException('Missing partition key.');</code>
</line>
<line>
<code>    }</code>
</line>
<line>
<code>    TransactionalBatch? batch;</code>
</line>
<line hits="6">
<code>    final key = _opsByPk.keys.singleOrDefault((k) =&gt; k == pk);</code>
<hit count="6" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    if (key == null) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      batch = TransactionalBatch(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>        container,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        continueOnError: true,</code>
</line>
<line hits="2">
<code>        partitionKey: partitionKey,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      );</code>
</line>
<line hits="3">
<code>      _opsByPk[pk] = batch;</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    } else {</code>
</line>
<line hits="3">
<code>      batch = _opsByPk[key]!;</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    }</code>
</line>
<line hits="2">
<code>    batch.add(op);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>    _ops.add(op);</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Executes the [BatchOperation]s registered in this batch instance. Operations are grouped</code>
</line>
<line>
<code>  /// by partition keys and sent to Cosmos DB in chunks of 100 operations per partition key.</code>
</line>
<line hits="1">
<code>  @override</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  Future&lt;BatchResponse&gt; execute({CosmosDbPermission? permission}) async {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    var pending = 0;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    final futures = &lt;Future&gt;[];</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>    for (var batch in _opsByPk.values) {</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      pending++;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      futures.add(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="5">
<code>          batch.execute(permission: permission).whenComplete(() =&gt; pending--));</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      while (pending &gt; 2) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        // throttle</code>
</line>
<line hits="2">
<code>        await Future.delayed(const Duration(milliseconds: 10));</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      }</code>
</line>
<line>
<code>    }</code>
</line>
<line hits="2">
<code>    await Future.wait(futures);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="7">
<code>    return BatchResponse()..addAll(_ops.map((o) =&gt; o.result!));</code>
<hit count="7" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="0">
<code>  @override</code>
</line>
<line hits="1">
<code>  List&lt;dynamic&gt; toJson() =&gt; _ops.map((o) =&gt; o.toJson()).toList();</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
</lines>
<config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
<base href="../"/>
<base href="../"/>
</coverage>
