<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2022-06-21" filename="collection.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.20253165" lines-covered="16" lines-valid="79" package="/lib/src" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import '_client.dart';</code>
        </line>
        <line>
            <code>import '_context.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import 'base_document.dart';</code>
        </line>
        <line>
            <code>import 'database.dart';</code>
        </line>
        <line>
            <code>import 'exceptions.dart';</code>
        </line>
        <line>
            <code>import 'partition.dart';</code>
        </line>
        <line>
            <code>import 'permission.dart';</code>
        </line>
        <line>
            <code>import 'query.dart';</code>
        </line>
        <line>
            <code>import 'server.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Class representing a CosmosDB collection.</code>
        </line>
        <line>
            <code>class Collection extends BaseDocument {</code>
        </line>
        <line hits="2">
            <code>  Collection(this.database, this.id, {this.partitionKeys})</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>      : url = '${database.url}/colls/$id';</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// The collection's parent [Database].</code>
        </line>
        <line>
            <code>  final Database database;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// The collection's base [url].</code>
        </line>
        <line>
            <code>  final String url;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Flag indicating whether the collection exists in CosmosDB.</code>
        </line>
        <line>
            <code>  /// `null` if no check has been made yet.</code>
        </line>
        <line hits="2">
            <code>  bool? get exists =&gt; _exists;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  bool? _exists;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line>
            <code>  final String id;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// The collection's list of partition keys; mandatory when creating a new [Collection].</code>
        </line>
        <line>
            <code>  final List&lt;String&gt;? partitionKeys;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  Map&lt;String, dynamic&gt; toJson() =&gt; {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>        'id': id,</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>        if (partitionKeys != null &amp;&amp; partitionKeys!.isNotEmpty)</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>          'partitionKey': {"paths": partitionKeys, "kind": "Hash", "Version": 2}</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      };</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Use this [Permission] when invoking the CosmosDB API. Using [Permission] is a way to</code>
        </line>
        <line>
            <code>  /// avoid disclosing the master key in client applications; to retrieve or create a</code>
        </line>
        <line>
            <code>  /// permission, you should implement some additional API to be used by your client app.</code>
        </line>
        <line>
            <code>  /// This API will protect your master keys. Most methods from [Collection] support an</code>
        </line>
        <line>
            <code>  /// optional [permission] argument, to allow for overriding this collection-wide</code>
        </line>
        <line>
            <code>  /// [permission].</code>
        </line>
        <line hits="0">
            <code>  void usePermission(Permission permission) {</code>
        </line>
        <line hits="0">
            <code>    _token = permission.token;</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Callback to refresh a permission. When the collection-wide [Permission] expires and</code>
        </line>
        <line>
            <code>  /// and a CosmosDB API replies with a [ForbiddenException] (HTTP error 403), this callback</code>
        </line>
        <line>
            <code>  /// will be invoked to obtain a new, valid [Permission] that will replace the expired one.</code>
        </line>
        <line>
            <code>  FutureCallback&lt;Permission?&gt;? onForbidden;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  String? _token;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  Future&lt;Permission?&gt; _refreshPermission() async {</code>
        </line>
        <line>
            <code>    Permission? permission;</code>
        </line>
        <line hits="0">
            <code>    final callback = onForbidden;</code>
        </line>
        <line hits="0">
            <code>    if (_token != null &amp;&amp; callback != null) {</code>
        </line>
        <line hits="0">
            <code>      permission = await callback();</code>
        </line>
        <line>
            <code>      if (permission != null) {</code>
        </line>
        <line hits="0">
            <code>        _token = permission.token;</code>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>    return permission;</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Register a [DocumentBuilder] for specified type `T`.</code>
        </line>
        <line hits="0">
            <code>  void registerBuilder&lt;T extends BaseDocument&gt;(DocumentBuilder&lt;T&gt; builder) =&gt;</code>
        </line>
        <line hits="0">
            <code>      database.registerBuilder&lt;T&gt;(builder);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Gets information for this [Collection].</code>
        </line>
        <line hits="1">
            <code>  Future&lt;Map&lt;String, dynamic&gt;?&gt; getInfo({Permission? permission}) =&gt;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      client.getJson(</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>          url,</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>          Context(</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>            type: 'colls',</code>
        </line>
        <line hits="1">
            <code>            token: permission?.token ?? _token,</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>          ));</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Finds the document with [id] in this collection. If the document does not exist,</code>
        </line>
        <line>
            <code>  /// this method returns `null` by default. If `throwOnNotFound` is set to `true`, it</code>
        </line>
        <line>
            <code>  /// will instead throw a [NotFoundException].</code>
        </line>
        <line hits="0">
            <code>  Future&lt;T?&gt; find&lt;T extends BaseDocument&gt;(String id,</code>
        </line>
        <line>
            <code>          {bool throwOnNotFound = false,</code>
        </line>
        <line>
            <code>          Partition? partition,</code>
        </line>
        <line>
            <code>          Permission? permission}) =&gt;</code>
        </line>
        <line hits="0">
            <code>      client.get&lt;T&gt;(</code>
        </line>
        <line hits="0">
            <code>        '$url/docs/$id',</code>
        </line>
        <line hits="0">
            <code>        Context(</code>
        </line>
        <line>
            <code>          type: 'docs',</code>
        </line>
        <line>
            <code>          throwOnNotFound: throwOnNotFound,</code>
        </line>
        <line hits="0">
            <code>          partition: partition ?? Partition(id),</code>
        </line>
        <line hits="0">
            <code>          token: permission?.token ?? _token,</code>
        </line>
        <line hits="0">
            <code>          onForbidden: _refreshPermission,</code>
        </line>
        <line>
            <code>        ),</code>
        </line>
        <line>
            <code>      );</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Lists all documents from this collection.</code>
        </line>
        <line hits="0">
            <code>  Future&lt;Iterable&lt;T&gt;&gt; list&lt;T extends BaseDocument&gt;(</code>
        </line>
        <line>
            <code>          {Partition? partition, Permission? permission}) =&gt;</code>
        </line>
        <line hits="0">
            <code>      client.getMany&lt;T&gt;(</code>
        </line>
        <line hits="0">
            <code>        '$url/docs',</code>
        </line>
        <line>
            <code>        'Documents',</code>
        </line>
        <line hits="0">
            <code>        Context(</code>
        </line>
        <line>
            <code>          type: 'docs',</code>
        </line>
        <line hits="0">
            <code>          resId: url,</code>
        </line>
        <line>
            <code>          partition: partition,</code>
        </line>
        <line hits="0">
            <code>          token: permission?.token ?? _token,</code>
        </line>
        <line hits="0">
            <code>          onForbidden: _refreshPermission,</code>
        </line>
        <line>
            <code>        ),</code>
        </line>
        <line>
            <code>      );</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Loads documents from this collection matching the provided [query].</code>
        </line>
        <line hits="0">
            <code>  Future&lt;Iterable&lt;T&gt;&gt; query&lt;T extends BaseDocument&gt;(Query query,</code>
        </line>
        <line>
            <code>          {Permission? permission}) =&gt;</code>
        </line>
        <line hits="0">
            <code>      client.query&lt;T&gt;(</code>
        </line>
        <line hits="0">
            <code>        '$url/docs',</code>
        </line>
        <line>
            <code>        query,</code>
        </line>
        <line>
            <code>        'Documents',</code>
        </line>
        <line hits="0">
            <code>        Context(</code>
        </line>
        <line>
            <code>          type: 'docs',</code>
        </line>
        <line hits="0">
            <code>          resId: url,</code>
        </line>
        <line hits="0">
            <code>          token: permission?.token ?? _token,</code>
        </line>
        <line hits="0">
            <code>          onForbidden: _refreshPermission,</code>
        </line>
        <line>
            <code>        ),</code>
        </line>
        <line>
            <code>      );</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Adds a new [document] to this collection.</code>
        </line>
        <line hits="0">
            <code>  Future&lt;T&gt; add&lt;T extends BaseDocument&gt;(T document,</code>
        </line>
        <line>
            <code>          {Partition? partition, Permission? permission}) =&gt;</code>
        </line>
        <line hits="0">
            <code>      client.post(</code>
        </line>
        <line hits="0">
            <code>        '$url/docs',</code>
        </line>
        <line>
            <code>        document,</code>
        </line>
        <line hits="0">
            <code>        Context(</code>
        </line>
        <line>
            <code>          type: 'docs',</code>
        </line>
        <line hits="0">
            <code>          resId: url,</code>
        </line>
        <line hits="0">
            <code>          partition: partition ?? Partition(document.id),</code>
        </line>
        <line hits="0">
            <code>          token: permission?.token ?? _token,</code>
        </line>
        <line hits="0">
            <code>          onForbidden: _refreshPermission,</code>
        </line>
        <line>
            <code>        ),</code>
        </line>
        <line>
            <code>      );</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Adds or updates (replaces) a [document] in this collection.</code>
        </line>
        <line hits="0">
            <code>  Future&lt;T&gt; upsert&lt;T extends BaseDocument&gt;(T document,</code>
        </line>
        <line>
            <code>          {Partition? partition, Permission? permission}) =&gt;</code>
        </line>
        <line hits="0">
            <code>      client.post(</code>
        </line>
        <line hits="0">
            <code>        '$url/docs',</code>
        </line>
        <line>
            <code>        document,</code>
        </line>
        <line hits="0">
            <code>        Context(</code>
        </line>
        <line>
            <code>          type: 'docs',</code>
        </line>
        <line hits="0">
            <code>          resId: url,</code>
        </line>
        <line hits="0">
            <code>          headers: {</code>
        </line>
        <line>
            <code>            'x-ms-documentdb-is-upsert': 'true',</code>
        </line>
        <line>
            <code>          },</code>
        </line>
        <line hits="0">
            <code>          partition: partition ?? Partition(document.id),</code>
        </line>
        <line hits="0">
            <code>          token: permission?.token ?? _token,</code>
        </line>
        <line hits="0">
            <code>          onForbidden: _refreshPermission,</code>
        </line>
        <line>
            <code>        ),</code>
        </line>
        <line>
            <code>      );</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Updates (replaces) a [document] in this collection. The [document] must be a</code>
        </line>
        <line>
            <code>  /// [BaseDocumentWithEtag] and its [BaseDocumentWithEtag.etag] must be known.</code>
        </line>
        <line hits="0">
            <code>  Future&lt;T&gt; replace&lt;T extends BaseDocumentWithEtag&gt;(T document,</code>
        </line>
        <line>
            <code>          {Partition? partition, Permission? permission}) =&gt;</code>
        </line>
        <line hits="0">
            <code>      client.put(</code>
        </line>
        <line hits="0">
            <code>        '$url/docs/${document.id}',</code>
        </line>
        <line>
            <code>        document,</code>
        </line>
        <line hits="0">
            <code>        Context(</code>
        </line>
        <line>
            <code>          type: 'docs',</code>
        </line>
        <line hits="0">
            <code>          headers: {</code>
        </line>
        <line hits="0">
            <code>            'if-match': document.etag,</code>
        </line>
        <line>
            <code>          },</code>
        </line>
        <line hits="0">
            <code>          partition: partition ?? Partition(document.id),</code>
        </line>
        <line hits="0">
            <code>          token: permission?.token ?? _token,</code>
        </line>
        <line hits="0">
            <code>          onForbidden: _refreshPermission,</code>
        </line>
        <line>
            <code>        ),</code>
        </line>
        <line>
            <code>      );</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Deletes the document with [id] from this collection. If the document does not</code>
        </line>
        <line>
            <code>  /// exist, this method returns `true` by default. If [throwOnNotFound] is set to</code>
        </line>
        <line>
            <code>  /// `true`, it will instead throw a [NotFoundException].</code>
        </line>
        <line hits="0">
            <code>  Future&lt;bool&gt; delete(String id,</code>
        </line>
        <line>
            <code>          {bool throwOnNotFound = false,</code>
        </line>
        <line>
            <code>          Partition? partition,</code>
        </line>
        <line>
            <code>          Permission? permission}) =&gt;</code>
        </line>
        <line hits="0">
            <code>      client.delete(</code>
        </line>
        <line hits="0">
            <code>        '$url/docs/$id',</code>
        </line>
        <line hits="0">
            <code>        Context(</code>
        </line>
        <line>
            <code>          type: 'docs',</code>
        </line>
        <line>
            <code>          throwOnNotFound: throwOnNotFound,</code>
        </line>
        <line hits="0">
            <code>          partition: partition ?? Partition(id),</code>
        </line>
        <line hits="0">
            <code>          token: permission?.token ?? _token,</code>
        </line>
        <line hits="0">
            <code>          onForbidden: _refreshPermission,</code>
        </line>
        <line>
            <code>        ),</code>
        </line>
        <line>
            <code>      );</code>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>// internal use</code>
        </line>
        <line>
            <code>extension CollectionExt on Collection {</code>
        </line>
        <line hits="3">
            <code>  void setExists(bool exists) =&gt; _exists = exists;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="3">
            <code>  Client get client =&gt; database.client;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../../"/>
    <base href="../../"/>
</coverage>
