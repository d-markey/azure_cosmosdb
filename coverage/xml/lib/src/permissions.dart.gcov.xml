<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2022-10-12" filename="permissions.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.0" lines-covered="0" lines-valid="45" package="/lib/src" testname="lcov.info" version="1.5">
<lines>
<line>
<code>import '_context.dart';</code>
</line>
<line>
<code/>
</line>
<line>
<code>import 'permission.dart';</code>
</line>
<line>
<code>import 'user.dart';</code>
</line>
<line>
<code>import 'users.dart';</code>
</line>
<line>
<code/>
</line>
<line>
<code>/// Class used to manage [Permission]s for CosmosDB [Users].</code>
</line>
<line>
<code>class Permissions {</code>
</line>
<line hits="0">
<code>  Permissions(this._users);</code>
</line>
<line>
<code/>
</line>
<line>
<code>  final Users _users;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  String? _token;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Use this [Permission] when invoking the CosmosDB API. Using [Permission] is a way to</code>
</line>
<line>
<code>  /// avoid disclosing the master key in client applications; to retrieve or create a</code>
</line>
<line>
<code>  /// permission, you should implement some additional API to be used by your client app.</code>
</line>
<line>
<code>  /// This API will protect your master keys. Most methods from [Users] support an</code>
</line>
<line>
<code>  /// optional [permission] argument, to allow for overriding this collection-wide</code>
</line>
<line>
<code>  /// [permission].</code>
</line>
<line hits="0">
<code>  void usePermission(Permission permission) {</code>
</line>
<line hits="0">
<code>    _token = permission.token;</code>
</line>
<line>
<code>  }</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Lists permissions for a [user].</code>
</line>
<line hits="0">
<code>  Future&lt;Iterable&lt;Permission&gt;&gt; list(User user, {Permission? permission}) =&gt;</code>
</line>
<line hits="0">
<code>      _users.client.getMany&lt;Permission&gt;(</code>
</line>
<line hits="0">
<code>        '${_users.url}/${user.id}/permissions',</code>
</line>
<line>
<code>        'Permissions',</code>
</line>
<line hits="0">
<code>        Context(</code>
</line>
<line>
<code>          type: 'permissions',</code>
</line>
<line hits="0">
<code>          resId: '${_users.url}/${user.id}',</code>
</line>
<line hits="0">
<code>          builder: Permission.build,</code>
</line>
<line hits="0">
<code>          token: permission?.token ?? _token,</code>
</line>
<line>
<code>        ),</code>
</line>
<line>
<code>      );</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Retrieves permission with id [name] for the specified [user].</code>
</line>
<line hits="0">
<code>  Future&lt;Permission?&gt; get(</code>
</line>
<line>
<code>    User user,</code>
</line>
<line>
<code>    String name, {</code>
</line>
<line>
<code>    Duration? expiry,</code>
</line>
<line>
<code>    Permission? permission,</code>
</line>
<line>
<code>  }) {</code>
</line>
<line hits="0">
<code>    final context = Context(</code>
</line>
<line>
<code>      type: 'permissions',</code>
</line>
<line>
<code>      throwOnNotFound: true,</code>
</line>
<line hits="0">
<code>      builder: Permission.build,</code>
</line>
<line hits="0">
<code>      token: permission?.token ?? _token,</code>
</line>
<line>
<code>    );</code>
</line>
<line hits="0">
<code>    final seconds = expiry?.inSeconds ?? 0;</code>
</line>
<line hits="0">
<code>    if (seconds &gt; 0) {</code>
</line>
<line hits="0">
<code>      context.addHeader('x-ms-documentdb-expiry-seconds', seconds.toString());</code>
</line>
<line>
<code>    }</code>
</line>
<line hits="0">
<code>    return _users.client.get&lt;Permission&gt;(</code>
</line>
<line hits="0">
<code>      '${_users.url}/${user.id}/permissions/$name',</code>
</line>
<line>
<code>      context,</code>
</line>
<line>
<code>    );</code>
</line>
<line hits="0">
<code>  }</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Grants the [user] the specified [userPermission].</code>
</line>
<line hits="0">
<code>  Future&lt;Permission&gt; grant(</code>
</line>
<line>
<code>    User user,</code>
</line>
<line>
<code>    Permission userPermission, {</code>
</line>
<line>
<code>    Duration? expiry,</code>
</line>
<line>
<code>    Permission? permission,</code>
</line>
<line>
<code>  }) {</code>
</line>
<line hits="0">
<code>    final context = Context(</code>
</line>
<line>
<code>      type: 'permissions',</code>
</line>
<line hits="0">
<code>      resId: '${_users.url}/${user.id}',</code>
</line>
<line hits="0">
<code>      builder: Permission.build,</code>
</line>
<line hits="0">
<code>      token: permission?.token ?? _token,</code>
</line>
<line>
<code>    );</code>
</line>
<line hits="0">
<code>    final seconds = expiry?.inSeconds ?? 0;</code>
</line>
<line hits="0">
<code>    if (seconds &gt; 0) {</code>
</line>
<line hits="0">
<code>      context.addHeader('x-ms-documentdb-expiry-seconds', seconds.toString());</code>
</line>
<line>
<code>    }</code>
</line>
<line hits="0">
<code>    return _users.client.post&lt;Permission&gt;(</code>
</line>
<line hits="0">
<code>      '${_users.url}/${user.id}/permissions',</code>
</line>
<line>
<code>      userPermission,</code>
</line>
<line>
<code>      context,</code>
</line>
<line>
<code>    );</code>
</line>
<line>
<code>  }</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Updates the [userPermission] for the specified [user].</code>
</line>
<line hits="0">
<code>  Future&lt;Permission&gt; replace(</code>
</line>
<line>
<code>    User user,</code>
</line>
<line>
<code>    Permission userPermission, {</code>
</line>
<line>
<code>    Duration? expiry,</code>
</line>
<line>
<code>    Permission? permission,</code>
</line>
<line>
<code>  }) {</code>
</line>
<line hits="0">
<code>    final context = Context(</code>
</line>
<line>
<code>      type: 'permissions',</code>
</line>
<line hits="0">
<code>      builder: Permission.build,</code>
</line>
<line hits="0">
<code>      token: permission?.token ?? _token,</code>
</line>
<line>
<code>    );</code>
</line>
<line hits="0">
<code>    final seconds = expiry?.inSeconds ?? 0;</code>
</line>
<line hits="0">
<code>    if (seconds &gt; 0) {</code>
</line>
<line hits="0">
<code>      context.addHeader('x-ms-documentdb-expiry-seconds', seconds.toString());</code>
</line>
<line>
<code>    }</code>
</line>
<line hits="0">
<code>    return _users.client.put&lt;Permission&gt;(</code>
</line>
<line hits="0">
<code>      '${_users.url}/${user.id}/permissions/${userPermission.id}',</code>
</line>
<line>
<code>      userPermission,</code>
</line>
<line>
<code>      context,</code>
</line>
<line>
<code>    );</code>
</line>
<line>
<code>  }</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Revokes permission with `id` for the specified [user].</code>
</line>
<line hits="0">
<code>  Future&lt;bool&gt; revoke(User user, String name,</code>
</line>
<line>
<code>          {bool throwOnNotFound = false, Permission? permission}) =&gt;</code>
</line>
<line hits="0">
<code>      _users.client.delete(</code>
</line>
<line hits="0">
<code>        '${_users.url}/${user.id}/permissions/$name',</code>
</line>
<line hits="0">
<code>        Context(</code>
</line>
<line>
<code>          type: 'permissions',</code>
</line>
<line>
<code>          throwOnNotFound: throwOnNotFound,</code>
</line>
<line hits="0">
<code>          builder: Permission.build,</code>
</line>
<line hits="0">
<code>          token: permission?.token ?? _token,</code>
</line>
<line>
<code>        ),</code>
</line>
<line>
<code>      );</code>
</line>
<line>
<code>}</code>
</line>
</lines>
<config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
<base href="../../"/>
<base href="../../"/>
</coverage>
