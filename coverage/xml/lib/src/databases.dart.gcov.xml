<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2022-06-30" filename="databases.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.9574468" lines-covered="45" lines-valid="47" package="/lib/src" testname="lcov.info" version="1.5">
<lines>
<line>
<code>import '_client.dart';</code>
</line>
<line>
<code>import '_context.dart';</code>
</line>
<line>
<code/>
</line>
<line>
<code>import 'database.dart';</code>
</line>
<line>
<code>import 'exceptions.dart';</code>
</line>
<line>
<code>import 'permission.dart';</code>
</line>
<line>
<code>import 'server.dart';</code>
</line>
<line>
<code/>
</line>
<line>
<code>/// Class used to manage [Database]s in a [Instance].</code>
</line>
<line>
<code>class Databases {</code>
</line>
<line hits="2">
<code>  Databases(this.server) : _url = 'dbs';</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// The hosting [Instance].</code>
</line>
<line>
<code>  final Instance server;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  final String _url;</code>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  Database _build(Map json) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>    final db = Database(server, json['id']);</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    db.setExists(true);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    return db;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  String? _token;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Use this [Permission] when invoking the CosmosDB API. Using [Permission] is a way to</code>
</line>
<line>
<code>  /// avoid disclosing the master key in client applications; to retrieve or create a</code>
</line>
<line>
<code>  /// permission, you should implement some additional API to be used by your client app.</code>
</line>
<line>
<code>  /// This API will protect your master keys. Most methods from [Users] support an</code>
</line>
<line>
<code>  /// optional [permission] argument, to allow for overriding this collection-wide</code>
</line>
<line>
<code>  /// [permission].</code>
</line>
<line hits="0">
<code>  void usePermission(Permission permission) {</code>
</line>
<line hits="0">
<code>    _token = permission.token;</code>
</line>
<line>
<code>  }</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Lists all databases from this [server].</code>
</line>
<line hits="2">
<code>  Future&lt;Iterable&lt;Database&gt;&gt; list({Permission? permission}) =&gt;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>      client.getMany&lt;Database&gt;(</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>        _url,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        'Databases',</code>
</line>
<line hits="2">
<code>        Context(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          type: 'dbs',</code>
</line>
<line>
<code>          resId: '',</code>
</line>
<line hits="2">
<code>          builder: _build,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          token: permission?.token ?? _token,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        ),</code>
</line>
<line hits="1">
<code>      );</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Deletes the specified [database] from this [server]. All collections and associated</code>
</line>
<line>
<code>  /// documents will be lost. If the [database] does not exists, this method returns</code>
</line>
<line>
<code>  /// `true` by default. if [throwOnNotFound] is set to `true`, it will throw a</code>
</line>
<line>
<code>  /// [NotFoundException] instead. Upon success, the [Database.exists] flag will</code>
</line>
<line>
<code>  /// be set to `false`.</code>
</line>
<line hits="2">
<code>  Future&lt;bool&gt; delete(Database database,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          {bool throwOnNotFound = false, Permission? permission}) =&gt;</code>
</line>
<line hits="2">
<code>      client</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>          .delete(</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>        '$_url/${database.id}',</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>        Context(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          type: 'dbs',</code>
</line>
<line>
<code>          throwOnNotFound: throwOnNotFound,</code>
</line>
<line hits="1">
<code>          token: permission?.token ?? _token,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        ),</code>
</line>
<line>
<code>      )</code>
</line>
<line hits="3">
<code>          .then((value) {</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>        database.setExists(false);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>        return true;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      });</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Creates a new [Database] with the specified `name`.</code>
</line>
<line hits="2">
<code>  Future&lt;Database&gt; create(String name, {Permission? permission}) =&gt;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>      client.post&lt;Database&gt;(</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>        _url,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>        Database(server, name),</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>        Context(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          type: 'dbs',</code>
</line>
<line>
<code>          resId: '',</code>
</line>
<line hits="2">
<code>          headers: {'x-ms-offer-throughput': '400'},</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          builder: _build,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>          token: permission?.token ?? _token,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        ),</code>
</line>
<line hits="1">
<code>      );</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Opens an existing [Database] with the specified `name`.</code>
</line>
<line hits="2">
<code>  Future&lt;Database&gt; open(String name, {Permission? permission}) async {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>    final db = Database(server, name);</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>    await db.getInfo(permission: permission);</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    db.setExists(true);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    return db;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Opens or creates a [Database] with the specified `name`.</code>
</line>
<line hits="2">
<code>  Future&lt;Database&gt; openOrCreate(String name, {Permission? permission}) async {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    try {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>      return await open(name, permission: permission);</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    } on NotFoundException {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>      return await create(name, permission: permission);</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    }</code>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
<line>
<code/>
</line>
<line>
<code>// internal use</code>
</line>
<line>
<code>extension DatabasesExt on Databases {</code>
</line>
<line hits="4">
<code>  Client get client =&gt; server.client;</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
</lines>
<config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
<base href="../../"/>
<base href="../../"/>
</coverage>
