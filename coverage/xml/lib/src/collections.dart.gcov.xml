<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2022-10-12" filename="collections.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.0" lines-covered="0" lines-valid="45" package="/lib/src" testname="lcov.info" version="1.5">
<lines>
<line>
<code>import '_context.dart';</code>
</line>
<line>
<code/>
</line>
<line>
<code>import 'collection.dart';</code>
</line>
<line>
<code>import 'database.dart';</code>
</line>
<line>
<code>import 'exceptions.dart';</code>
</line>
<line>
<code>import 'permission.dart';</code>
</line>
<line>
<code/>
</line>
<line>
<code>/// Class used to manage [Collection]s in a [Database].</code>
</line>
<line>
<code>class Collections {</code>
</line>
<line hits="0">
<code>  Collections(this.database) : url = '${database.url}/colls';</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// The owner [Database].</code>
</line>
<line>
<code>  final Database database;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  final String url;</code>
</line>
<line>
<code/>
</line>
<line hits="0">
<code>  Collection _build(Map json) {</code>
</line>
<line hits="0">
<code>    final coll = Collection(database, json['id']);</code>
</line>
<line hits="0">
<code>    coll.setExists(true);</code>
</line>
<line hits="0">
<code>    return coll;</code>
</line>
<line hits="0">
<code>  }</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Lists all collections from this [database].</code>
</line>
<line hits="0">
<code>  Future&lt;Iterable&lt;Collection&gt;&gt; list({Permission? permission}) =&gt;</code>
</line>
<line hits="0">
<code>      database.client.getMany&lt;Collection&gt;(</code>
</line>
<line hits="0">
<code>        url,</code>
</line>
<line>
<code>        'DocumentCollections',</code>
</line>
<line hits="0">
<code>        Context(</code>
</line>
<line>
<code>          type: 'colls',</code>
</line>
<line hits="0">
<code>          resId: database.url,</code>
</line>
<line hits="0">
<code>          builder: _build,</code>
</line>
<line hits="0">
<code>          token: permission?.token,</code>
</line>
<line>
<code>        ),</code>
</line>
<line hits="0">
<code>      );</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Deletes the specified [collection] from this [database]. All documents in this</code>
</line>
<line>
<code>  /// [collection] will be lost. If the [collection] does not exists, this method</code>
</line>
<line>
<code>  /// returns `true` by default. if [throwOnNotFound] is set to `true`, it will throw</code>
</line>
<line>
<code>  /// a [NotFoundException] instead. Upon success, the [Collection.exists] flag will</code>
</line>
<line>
<code>  /// be set to `false`.</code>
</line>
<line hits="0">
<code>  Future&lt;bool&gt; delete(Collection collection,</code>
</line>
<line>
<code>          {bool throwOnNotFound = false, Permission? permission}) =&gt;</code>
</line>
<line hits="0">
<code>      database.client</code>
</line>
<line hits="0">
<code>          .delete(</code>
</line>
<line hits="0">
<code>        '$url/${collection.id}',</code>
</line>
<line hits="0">
<code>        Context(</code>
</line>
<line>
<code>          type: 'colls',</code>
</line>
<line>
<code>          throwOnNotFound: throwOnNotFound,</code>
</line>
<line hits="0">
<code>          token: permission?.token,</code>
</line>
<line>
<code>        ),</code>
</line>
<line>
<code>      )</code>
</line>
<line hits="0">
<code>          .then((value) {</code>
</line>
<line hits="0">
<code>        collection.setExists(false);</code>
</line>
<line hits="0">
<code>        return true;</code>
</line>
<line hits="0">
<code>      });</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Creates a new [Collection] with the specified `name` and `partitionKeys`.</code>
</line>
<line hits="0">
<code>  Future&lt;Collection&gt; create(String name,</code>
</line>
<line>
<code>          {List&lt;String&gt;? partitionKeys, Permission? permission}) =&gt;</code>
</line>
<line hits="0">
<code>      database.client.post&lt;Collection&gt;(</code>
</line>
<line hits="0">
<code>        url,</code>
</line>
<line hits="0">
<code>        Collection(database, name, partitionKeys: partitionKeys),</code>
</line>
<line hits="0">
<code>        Context(</code>
</line>
<line>
<code>          type: 'colls',</code>
</line>
<line hits="0">
<code>          resId: database.url,</code>
</line>
<line hits="0">
<code>          headers: {</code>
</line>
<line>
<code>            'x-ms-offer-throughput': '400',</code>
</line>
<line>
<code>          },</code>
</line>
<line hits="0">
<code>          builder: _build,</code>
</line>
<line>
<code>        ),</code>
</line>
<line hits="0">
<code>      );</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Opens an existing [Collection] with id [name].</code>
</line>
<line hits="0">
<code>  Future&lt;Collection&gt; open(String name) async {</code>
</line>
<line hits="0">
<code>    final coll = Collection(database, name);</code>
</line>
<line hits="0">
<code>    await coll.getInfo();</code>
</line>
<line hits="0">
<code>    coll.setExists(true);</code>
</line>
<line hits="0">
<code>    return coll;</code>
</line>
<line hits="0">
<code>  }</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Opens or creates a [Collection] with id [name].</code>
</line>
<line hits="0">
<code>  Future&lt;Collection&gt; openOrCreate(String name,</code>
</line>
<line>
<code>      {List&lt;String&gt;? partitionKeys}) async {</code>
</line>
<line hits="0">
<code>    try {</code>
</line>
<line hits="0">
<code>      return await open(name);</code>
</line>
<line hits="0">
<code>    } on NotFoundException {</code>
</line>
<line hits="0">
<code>      return await create(name, partitionKeys: partitionKeys);</code>
</line>
<line>
<code>    }</code>
</line>
<line hits="0">
<code>  }</code>
</line>
<line>
<code>}</code>
</line>
</lines>
<config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
<base href="../../"/>
<base href="../../"/>
</coverage>
