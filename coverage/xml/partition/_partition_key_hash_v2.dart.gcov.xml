<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2023-03-04" filename="_partition_key_hash_v2.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.7631579" lines-covered="58" lines-valid="76" package="/partition" testname="lcov.info" version="1.5">
<lines>
<line>
<code>import 'dart:convert';</code>
</line>
<line>
<code>import 'dart:typed_data';</code>
</line>
<line>
<code/>
</line>
<line>
<code>import 'package:murmur3/murmur3.dart';</code>
</line>
<line>
<code/>
</line>
<line>
<code>import '../cosmos_db_exceptions.dart';</code>
</line>
<line>
<code/>
</line>
<line>
<code>class PartitionKeyComponentType {</code>
</line>
<line>
<code>  static const _undefined = 0x00;</code>
</line>
<line>
<code>  static const _null = 0x01;</code>
</line>
<line>
<code>  static const _false = 0x02;</code>
</line>
<line>
<code>  static const _true = 0x03;</code>
</line>
<line>
<code>  // ignore: unused_field</code>
</line>
<line>
<code>  static const _minNumber = 0x04;</code>
</line>
<line>
<code>  static const _number = 0x05;</code>
</line>
<line>
<code>  // ignore: unused_field</code>
</line>
<line>
<code>  static const _maxNumber = 0x06;</code>
</line>
<line>
<code>  // ignore: unused_field</code>
</line>
<line>
<code>  static const _minString = 0x07;</code>
</line>
<line>
<code>  static const _string = 0x08;</code>
</line>
<line>
<code>  // ignore: unused_field</code>
</line>
<line>
<code>  static const _maxString = 0x09;</code>
</line>
<line>
<code>  // ignore: unused_field</code>
</line>
<line>
<code>  static const _int64 = 0x0A;</code>
</line>
<line>
<code>  // ignore: unused_field</code>
</line>
<line>
<code>  static const _int32 = 0x0B;</code>
</line>
<line>
<code>  // ignore: unused_field</code>
</line>
<line>
<code>  static const _int16 = 0x0C;</code>
</line>
<line>
<code>  // ignore: unused_field</code>
</line>
<line>
<code>  static const _int8 = 0x0D;</code>
</line>
<line>
<code>  // ignore: unused_field</code>
</line>
<line>
<code>  static const _uint64 = 0x0E;</code>
</line>
<line>
<code>  // ignore: unused_field</code>
</line>
<line>
<code>  static const _uint32 = 0x0F;</code>
</line>
<line>
<code>  // ignore: unused_field</code>
</line>
<line>
<code>  static const _uint16 = 0x10;</code>
</line>
<line>
<code>  // ignore: unused_field</code>
</line>
<line>
<code>  static const _uint8 = 0x11;</code>
</line>
<line>
<code>  // ignore: unused_field</code>
</line>
<line>
<code>  static const _binary = 0x12;</code>
</line>
<line>
<code>  // ignore: unused_field</code>
</line>
<line>
<code>  static const _guid = 0x13;</code>
</line>
<line>
<code>  // ignore: unused_field</code>
</line>
<line>
<code>  static const _float = 0x14;</code>
</line>
<line>
<code>  static const _infinity = 0xFF;</code>
</line>
<line>
<code>}</code>
</line>
<line>
<code/>
</line>
<line>
<code>class PartitionKeyHashV2 implements Comparable&lt;PartitionKeyHashV2&gt; {</code>
</line>
<line hits="4">
<code>  static final _mask = BigInt.parse('0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF');</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  static const maxStringLength = 2 * 1024;</code>
</line>
<line>
<code/>
</line>
<line hits="3">
<code>  static final PartitionKeyHashV2 _true =</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      _hash(PartitionKeyComponentType._true);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>  static final PartitionKeyHashV2 _false =</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      _hash(PartitionKeyComponentType._false);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>  static final PartitionKeyHashV2 _null =</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      _hash(PartitionKeyComponentType._null);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="0">
<code>  static final PartitionKeyHashV2 _undefined =</code>
</line>
<line hits="0">
<code>      _hash(PartitionKeyComponentType._undefined);</code>
</line>
<line hits="4">
<code>  static final PartitionKeyHashV2 _emptyString = _hash(</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      [PartitionKeyComponentType._string, PartitionKeyComponentType._infinity]);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  PartitionKeyHashV2._(this.hex);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  final String hex;</code>
</line>
<line>
<code/>
</line>
<line hits="4">
<code>  BigInt get value =&gt; BigInt.parse(hex, radix: 16);</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="4">
<code>  factory PartitionKeyHashV2.bool(bool value) =&gt; value ? _true : _false;</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="0">
<code>  factory PartitionKeyHashV2.double(num value) =&gt;</code>
</line>
<line hits="0">
<code>      PartitionKeyHashV2.hierarchical([value]);</code>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  factory PartitionKeyHashV2.string(String value) =&gt; value.isEmpty</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="0">
<code>      ? _emptyString</code>
</line>
<line hits="2">
<code>      : (value.length &lt;= maxStringLength)</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>          ? PartitionKeyHashV2.hierarchical([value])</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="0">
<code>          : throw PartitionKeyException('Partition key value is too long.');</code>
</line>
<line>
<code/>
</line>
<line hits="3">
<code>  factory PartitionKeyHashV2.nullKey() =&gt; PartitionKeyHashV2._null;</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="3">
<code>  factory PartitionKeyHashV2.trueKey() =&gt; PartitionKeyHashV2._true;</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="3">
<code>  factory PartitionKeyHashV2.falseKey() =&gt; PartitionKeyHashV2._false;</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  factory PartitionKeyHashV2.emptyStringKey() =&gt;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      PartitionKeyHashV2._emptyString;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="0">
<code>  factory PartitionKeyHashV2.undefinedKey() =&gt; PartitionKeyHashV2._undefined;</code>
</line>
<line>
<code/>
</line>
<line hits="0">
<code>  factory PartitionKeyHashV2(List&lt;dynamic&gt; data) {</code>
</line>
<line hits="0">
<code>    final bytes = getBytes(data).toList();</code>
</line>
<line hits="0">
<code>    return _hash(bytes);</code>
</line>
<line>
<code>  }</code>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  factory PartitionKeyHashV2.hierarchical(List&lt;dynamic&gt; data) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    final parts = &lt;String&gt;[];</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>    for (var i = 0; i &lt; data.length; i++) {</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>      final bytes = getBytes(data[i]).toList();</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      final hash = _hash(bytes);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>      parts.add(hash.hex);</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    }</code>
</line>
<line hits="3">
<code>    return PartitionKeyHashV2._(parts.join(''));</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  static Iterable&lt;int&gt; getBytes(dynamic value) sync* {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    if (value == null) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      yield PartitionKeyComponentType._null;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    } else if (value is bool) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      yield value</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          ? PartitionKeyComponentType._true</code>
</line>
<line>
<code>          : PartitionKeyComponentType._false;</code>
</line>
<line hits="2">
<code>    } else if (value is num) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>      final dl = Float64List.fromList([value.toDouble()]);</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      var bytes = dl.buffer.asUint8List();</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      if (Endian.host == Endian.big) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="0">
<code>        bytes = Uint8List.fromList(bytes.reversed.toList());</code>
</line>
<line>
<code>      }</code>
</line>
<line hits="1">
<code>      yield PartitionKeyComponentType._number;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      yield* bytes;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    } else if (value is String) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      if (value.length &gt; maxStringLength) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="0">
<code>        throw PartitionKeyException('Partition key value is too long.');</code>
</line>
<line>
<code>      }</code>
</line>
<line hits="1">
<code>      yield PartitionKeyComponentType._string;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      yield* utf8.encode(value);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      yield PartitionKeyComponentType._infinity;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="0">
<code>    } else if (value is Iterable) {</code>
</line>
<line hits="0">
<code>      for (var item in value) {</code>
</line>
<line hits="0">
<code>        yield* getBytes(item);</code>
</line>
<line>
<code>      }</code>
</line>
<line>
<code>    } else {</code>
</line>
<line hits="0">
<code>      yield PartitionKeyComponentType._undefined;</code>
</line>
<line>
<code>    }</code>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  static PartitionKeyHashV2 _hash(dynamic data) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>    var hash = murmur3f(data, seed: BigInt.zero) as BigInt;</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    // hi/lo parts are inverted in Cosmos DB</code>
</line>
<line hits="3">
<code>    final hex = hash.toRadixString(16).padLeft(32, '0');</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    final hi = hex.substring(0, 16);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    final lo = hex.substring(16, 32);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="5">
<code>    hash = BigInt.parse(lo + hi, radix: 16) &amp; _mask;</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    return PartitionKeyHashV2._(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>        hash.toRadixString(16).toUpperCase().padLeft(32, '0'));</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  @override</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>  int compareTo(PartitionKeyHashV2 other) =&gt; value.compareTo(other.value);</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="0">
<code>  @override</code>
</line>
<line hits="0">
<code>  int get hashCode =&gt; hex.hashCode;</code>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  @override</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>  bool operator ==(dynamic other) =&gt; compareTo(other) == 0;</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
</lines>
<config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
<base href="../"/>
<base href="../"/>
</coverage>
