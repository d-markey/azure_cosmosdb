<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2023-01-07" filename="cosmos_db_containers.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.0" lines-covered="0" lines-valid="44" package="/src" testname="lcov.info" version="1.5">
<lines>
<line>
<code>import 'client/_context.dart';</code>
</line>
<line>
<code>import 'cosmos_db_container.dart';</code>
</line>
<line>
<code>import 'cosmos_db_database.dart';</code>
</line>
<line>
<code>import 'cosmos_db_exceptions.dart';</code>
</line>
<line>
<code>import 'cosmos_db_throughput.dart';</code>
</line>
<line>
<code>import 'indexing/geospatial_config.dart';</code>
</line>
<line>
<code>import 'indexing/indexing_policy.dart';</code>
</line>
<line>
<code>import 'partition/partition_key_spec.dart';</code>
</line>
<line>
<code>import 'permissions/cosmos_db_permission.dart';</code>
</line>
<line>
<code/>
</line>
<line>
<code>/// Class used to manage [CosmosDbContainer]s in a [CosmosDbDatabase].</code>
</line>
<line>
<code>class CosmosDbContainers {</code>
</line>
<line hits="0">
<code>  CosmosDbContainers(this.database) : url = '${database.url}/colls';</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// The owner [CosmosDbDatabase].</code>
</line>
<line>
<code>  final CosmosDbDatabase database;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  final String url;</code>
</line>
<line>
<code/>
</line>
<line hits="0">
<code>  CosmosDbContainer fromJson(Map json) {</code>
</line>
<line hits="0">
<code>    final coll = CosmosDbContainer(database, json['id'],</code>
</line>
<line hits="0">
<code>        partitionKeySpec: PartitionKeySpec.fromJson(json['partitionKey']));</code>
</line>
<line hits="0">
<code>    coll.setExists(true);</code>
</line>
<line hits="0">
<code>    return coll;</code>
</line>
<line hits="0">
<code>  }</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Lists all containers from this [database].</code>
</line>
<line hits="0">
<code>  Future&lt;Iterable&lt;CosmosDbContainer&gt;&gt; list({CosmosDbPermission? permission}) =&gt;</code>
</line>
<line hits="0">
<code>      database.client.getMany&lt;CosmosDbContainer&gt;(</code>
</line>
<line hits="0">
<code>        url,</code>
</line>
<line>
<code>        'DocumentCollections',</code>
</line>
<line hits="0">
<code>        Context(</code>
</line>
<line>
<code>          type: 'colls',</code>
</line>
<line hits="0">
<code>          resId: database.url,</code>
</line>
<line hits="0">
<code>          builder: fromJson,</code>
</line>
<line hits="0">
<code>          token: permission?.token,</code>
</line>
<line>
<code>        ),</code>
</line>
<line hits="0">
<code>      );</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Deletes the specified [container] from this [database]. All documents in this</code>
</line>
<line>
<code>  /// [container] will be lost. If the [container] does not exists, this method</code>
</line>
<line>
<code>  /// returns `true` by default. if [throwOnNotFound] is set to `true`, it will throw</code>
</line>
<line>
<code>  /// a [NotFoundException] instead. Upon success, the [CosmosDbContainer.exists] flag will</code>
</line>
<line>
<code>  /// be set to `false`.</code>
</line>
<line hits="0">
<code>  Future&lt;bool&gt; delete(CosmosDbContainer container,</code>
</line>
<line>
<code>          {bool throwOnNotFound = false, CosmosDbPermission? permission}) =&gt;</code>
</line>
<line hits="0">
<code>      database.client</code>
</line>
<line hits="0">
<code>          .delete(</code>
</line>
<line hits="0">
<code>        '$url/${container.id}',</code>
</line>
<line hits="0">
<code>        Context(</code>
</line>
<line>
<code>          type: 'colls',</code>
</line>
<line>
<code>          throwOnNotFound: throwOnNotFound,</code>
</line>
<line hits="0">
<code>          token: permission?.token,</code>
</line>
<line>
<code>        ),</code>
</line>
<line>
<code>      )</code>
</line>
<line hits="0">
<code>          .then((value) {</code>
</line>
<line hits="0">
<code>        container.setExists(false);</code>
</line>
<line hits="0">
<code>        return true;</code>
</line>
<line hits="0">
<code>      });</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Creates a new [CosmosDbContainer] with the specified `name` and `partitionKeys`.</code>
</line>
<line hits="0">
<code>  Future&lt;CosmosDbContainer&gt; create(</code>
</line>
<line>
<code>    String name, {</code>
</line>
<line>
<code>    required PartitionKeySpec partitionKey,</code>
</line>
<line>
<code>    IndexingPolicy? indexingPolicy,</code>
</line>
<line>
<code>    GeospatialConfig? geospatialConfig,</code>
</line>
<line>
<code>    CosmosDbPermission? permission,</code>
</line>
<line>
<code>    CosmosDbThroughput? throughput,</code>
</line>
<line>
<code>  }) =&gt;</code>
</line>
<line hits="0">
<code>      database.client.post&lt;CosmosDbContainer&gt;(</code>
</line>
<line hits="0">
<code>        url,</code>
</line>
<line hits="0">
<code>        CosmosDbContainer(</code>
</line>
<line hits="0">
<code>          database,</code>
</line>
<line>
<code>          name,</code>
</line>
<line hits="0">
<code>          partitionKeySpec: partitionKey,</code>
</line>
<line>
<code>          indexingPolicy: indexingPolicy,</code>
</line>
<line>
<code>          geospatialConfig: geospatialConfig,</code>
</line>
<line>
<code>        ),</code>
</line>
<line hits="0">
<code>        Context(</code>
</line>
<line>
<code>          type: 'colls',</code>
</line>
<line hits="0">
<code>          resId: database.url,</code>
</line>
<line hits="0">
<code>          headers: (throughput ?? CosmosDbThroughput.minimum).header,</code>
</line>
<line hits="0">
<code>          builder: fromJson,</code>
</line>
<line>
<code>        ),</code>
</line>
<line hits="0">
<code>      );</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Opens an existing [CosmosDbContainer] with id [name].</code>
</line>
<line hits="0">
<code>  Future&lt;CosmosDbContainer&gt; open(String name) =&gt;</code>
</line>
<line hits="0">
<code>      CosmosDbContainer(database, name).getInfo();</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Opens or creates a [CosmosDbContainer] with id [name].</code>
</line>
<line hits="0">
<code>  Future&lt;CosmosDbContainer&gt; openOrCreate(</code>
</line>
<line>
<code>    String name, {</code>
</line>
<line>
<code>    PartitionKeySpec? partitionKey,</code>
</line>
<line>
<code>    IndexingPolicy? indexingPolicy,</code>
</line>
<line>
<code>    GeospatialConfig? geospatialConfig,</code>
</line>
<line>
<code>    CosmosDbThroughput? throughput,</code>
</line>
<line>
<code>  }) async {</code>
</line>
<line hits="0">
<code>    try {</code>
</line>
<line hits="0">
<code>      return await open(name);</code>
</line>
<line hits="0">
<code>    } on NotFoundException {</code>
</line>
<line hits="0">
<code>      return await create(</code>
</line>
<line>
<code>        name,</code>
</line>
<line>
<code>        partitionKey: partitionKey!,</code>
</line>
<line>
<code>        indexingPolicy: indexingPolicy,</code>
</line>
<line>
<code>        geospatialConfig: geospatialConfig,</code>
</line>
<line>
<code>        throughput: throughput,</code>
</line>
<line>
<code>      );</code>
</line>
<line>
<code>    }</code>
</line>
<line hits="0">
<code>  }</code>
</line>
<line>
<code>}</code>
</line>
</lines>
<config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
<base href="../"/>
<base href="../"/>
</coverage>
