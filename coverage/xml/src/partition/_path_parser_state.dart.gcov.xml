<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2025-01-06" filename="_path_parser_state.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.94285715" lines-covered="33" lines-valid="35" package="src/partition" testname="lcov.info" version="1.6">
<lines>
<line number="1">
<code>import '../cosmos_db_exceptions.dart';</code>
</line>
<line number="2">
<code>import '_path_component.dart';</code>
</line>
<line number="3">
<code/>
</line>
<line number="4">
<code>class ParserState {</code>
</line>
<line hits="1" number="5">
<code>  ParserState(String path)</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="5" number="6">
<code>      : _chars = path.runes.map((r) =&gt; String.fromCharCode(r)).toList();</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line number="7">
<code/>
</line>
<line number="8">
<code>  final List&lt;String&gt; _chars;</code>
</line>
<line number="9">
<code>  int _pos = 0;</code>
</line>
<line number="10">
<code/>
</line>
<line hits="8" number="11">
<code>  String get current =&gt; (_pos &lt; _chars.length) ? _chars[_pos] : '';</code>
<hit count="8" name="&lt;unnamed&gt;"/>
</line>
<line number="12">
<code/>
</line>
<line hits="1" number="13">
<code>  PathSegment getPathSegment() {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2" number="14">
<code>    if (current == '/') {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2" number="15">
<code>      _pos++;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line number="16">
<code>    }</code>
</line>
<line hits="2" number="17">
<code>    var start = _pos, end = -1;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2" number="18">
<code>    if (current == '"') {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="19">
<code>      start++;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2" number="20">
<code>      _pos++;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="4" number="21">
<code>      while (_pos &lt; _chars.length) {</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="2" number="22">
<code>        if (current == '"') {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="23">
<code>          end = _pos;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2" number="24">
<code>          _pos++;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line number="25">
<code>          break;</code>
</line>
<line number="26">
<code>        }</code>
</line>
<line hits="2" number="27">
<code>        _pos++;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line number="28">
<code>      }</code>
</line>
<line number="29">
<code>    } else {</code>
</line>
<line hits="4" number="30">
<code>      while (_pos &lt; _chars.length) {</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="2" number="31">
<code>        if (const {'/', '['}.contains(current)) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="32">
<code>          end = _pos;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="33">
<code>          break;</code>
</line>
<line number="34">
<code>        }</code>
</line>
<line hits="2" number="35">
<code>        _pos++;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line number="36">
<code>      }</code>
</line>
<line number="37">
<code>    }</code>
</line>
<line hits="1" number="38">
<code>    if (end &lt; 0) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="39">
<code>      end = _pos;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="40">
<code>    }</code>
</line>
<line hits="5" number="41">
<code>    return PathSegment(_chars.sublist(start, end).join().trim());</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line number="42">
<code>  }</code>
</line>
<line number="43">
<code/>
</line>
<line hits="1" number="44">
<code>  ArrayIndex getArrayIndex() {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2" number="45">
<code>    _pos++;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2" number="46">
<code>    var start = _pos, end = -1;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="4" number="47">
<code>    while (_pos &lt; _chars.length) {</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="2" number="48">
<code>      if (current == ']') {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="49">
<code>        end = _pos;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2" number="50">
<code>        _pos++;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line number="51">
<code>        break;</code>
</line>
<line number="52">
<code>      }</code>
</line>
<line hits="2" number="53">
<code>      _pos++;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line number="54">
<code>    }</code>
</line>
<line hits="1" number="55">
<code>    if (end &lt; 0) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="0" number="56">
<code>      throw ParsingException('Missing token: "]".');</code>
</line>
<line number="57">
<code>    }</code>
</line>
<line hits="4" number="58">
<code>    final idx = int.tryParse(_chars.sublist(start, end).join());</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line number="59">
<code>    if (idx == null) {</code>
</line>
<line hits="0" number="60">
<code>      throw ParsingException('Integer value expected in array accessor.');</code>
</line>
<line number="61">
<code>    }</code>
</line>
<line hits="1" number="62">
<code>    return ArrayIndex(idx);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="63">
<code>  }</code>
</line>
<line number="64">
<code>}</code>
</line>
</lines>
<config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false" show-details="false"/>
<base href="../../"/>
<base href="../../"/>
</coverage>
