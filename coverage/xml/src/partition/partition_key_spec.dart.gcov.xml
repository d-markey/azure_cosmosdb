<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2023-01-07" filename="partition_key_spec.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.1" lines-covered="5" lines-valid="50" package="/src/partition" testname="lcov.info" version="1.5">
<lines>
<line>
<code>import '../base_document.dart';</code>
</line>
<line>
<code>import '_path_parser.dart';</code>
</line>
<line>
<code>import 'partition_key.dart';</code>
</line>
<line>
<code/>
</line>
<line>
<code>/// Class representing a partition key definition in a Cosmos DB container.</code>
</line>
<line>
<code>class PartitionKeySpec {</code>
</line>
<line hits="0">
<code>  PartitionKeySpec._(this.paths, this.kind, this.version)</code>
</line>
<line hits="0">
<code>      : _partitionKeyPaths = null;</code>
</line>
<line>
<code/>
</line>
<line hits="0">
<code>  factory PartitionKeySpec._cached(List&lt;String&gt; paths,</code>
</line>
<line>
<code>      {required String kind, required int version}) {</code>
</line>
<line hits="0">
<code>    final pk = PartitionKeySpec._(paths, kind, version);</code>
</line>
<line hits="0">
<code>    var cached = _cache.lookup(pk);</code>
</line>
<line hits="0">
<code>    if (cached == null) {</code>
</line>
<line hits="0">
<code>      _cache.add(pk);</code>
</line>
<line>
<code>      cached = pk;</code>
</line>
<line>
<code>    }</code>
</line>
<line hits="0">
<code>    return cached;</code>
</line>
<line hits="0">
<code>  }</code>
</line>
<line>
<code/>
</line>
<line hits="0">
<code>  factory PartitionKeySpec._v2(List&lt;String&gt; paths) =&gt;</code>
</line>
<line hits="0">
<code>      PartitionKeySpec._cached(paths,</code>
</line>
<line hits="0">
<code>          kind: (paths.length &gt; 1) ? 'MultiHash' : 'Hash', version: 2);</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Partition key with a single property.</code>
</line>
<line hits="0">
<code>  factory PartitionKeySpec(String partitionKey) =&gt;</code>
</line>
<line hits="0">
<code>      PartitionKeySpec._v2(List.unmodifiable([partitionKey]));</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Creates a partition for multiple keys.</code>
</line>
<line hits="0">
<code>  factory PartitionKeySpec.multi(List&lt;String&gt; partitionKeys) =&gt;</code>
</line>
<line hits="0">
<code>      PartitionKeySpec._v2(List.unmodifiable(partitionKeys));</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Default partition key.</code>
</line>
<line hits="1">
<code>  static final id = PartitionKeySpec._(['/id'], 'Hash', 2);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// The partition key paths</code>
</line>
<line>
<code>  final List&lt;String&gt; paths;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// The partition key kind</code>
</line>
<line>
<code>  final String kind;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// The partition key version</code>
</line>
<line>
<code>  final int version;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Converts this instance to JSON.</code>
</line>
<line hits="1">
<code>  dynamic toJson() =&gt; {'paths': paths, 'kind': kind, 'version': version};</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// The partition key components</code>
</line>
<line hits="0">
<code>  List&lt;List&lt;PathComponent&gt;&gt;? _partitionKeyPaths;</code>
</line>
<line>
<code/>
</line>
<line hits="0">
<code>  @override</code>
</line>
<line hits="0">
<code>  int get hashCode =&gt; paths.join('\u0000').hashCode;</code>
</line>
<line>
<code/>
</line>
<line hits="0">
<code>  @override</code>
</line>
<line hits="0">
<code>  bool operator ==(dynamic other) {</code>
</line>
<line hits="0">
<code>    if (other is! PartitionKeySpec ||</code>
</line>
<line hits="0">
<code>        other.paths.length != paths.length ||</code>
</line>
<line hits="0">
<code>        other.version != version ||</code>
</line>
<line hits="0">
<code>        other.kind != kind) {</code>
</line>
<line hits="0">
<code>      return false;</code>
</line>
<line>
<code>    } else {</code>
</line>
<line hits="0">
<code>      for (var i = 0; i &lt; paths.length; i++) {</code>
</line>
<line hits="0">
<code>        if (other.paths[i] != paths[i]) {</code>
</line>
<line hits="0">
<code>          return false;</code>
</line>
<line>
<code>        }</code>
</line>
<line>
<code>      }</code>
</line>
<line hits="0">
<code>      return true;</code>
</line>
<line>
<code>    }</code>
</line>
<line hits="0">
<code>  }</code>
</line>
<line>
<code/>
</line>
<line hits="0">
<code>  static PartitionKeySpec fromJson(dynamic json) =&gt; PartitionKeySpec._cached(</code>
</line>
<line hits="0">
<code>        json['paths'].cast&lt;String&gt;(),</code>
</line>
<line hits="0">
<code>        kind: json['kind'],</code>
</line>
<line hits="0">
<code>        version: json['version'],</code>
</line>
<line>
<code>      );</code>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  static final _parser = PathParser();</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Extracts the [document]'s partition key according to this specification.</code>
</line>
<line hits="0">
<code>  PartitionKey? from(BaseDocument document) {</code>
</line>
<line hits="0">
<code>    try {</code>
</line>
<line hits="0">
<code>      final keys = _extractKeys(document);</code>
</line>
<line hits="0">
<code>      return keys.isEmpty ? null : PartitionKey.multi(keys);</code>
</line>
<line>
<code>    } catch (ex) {</code>
</line>
<line hits="0">
<code>      return null;</code>
</line>
<line>
<code>    }</code>
</line>
<line hits="0">
<code>  }</code>
</line>
<line>
<code/>
</line>
<line hits="0">
<code>  List&lt;dynamic&gt; _extractKeys(BaseDocument doc) =&gt;</code>
</line>
<line hits="0">
<code>      (_partitionKeyPaths ??= paths.map((pk) =&gt; _parser.parse(pk)).toList())</code>
</line>
<line hits="1">
<code>          .map((p) =&gt; p.extract(doc.toJson()))</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="0">
<code>          .where((k) =&gt; k != null)</code>
</line>
<line hits="0">
<code>          .toList();</code>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  static final _cache = &lt;PartitionKeySpec&gt;{id};</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
</lines>
<config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
<base href="../../"/>
<base href="../../"/>
</coverage>
