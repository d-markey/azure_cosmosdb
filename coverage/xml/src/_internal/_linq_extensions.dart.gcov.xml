<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2023-01-14" filename="_linq_extensions.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="1.0" lines-covered="29" lines-valid="29" package="/src/_internal" testname="lcov.info" version="1.5">
<lines>
<line>
<code>class LinqException implements Exception {</code>
</line>
<line hits="2">
<code>  LinqException(this.message);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  final String message;</code>
</line>
<line>
<code>}</code>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>T _identity&lt;T&gt;(T item) =&gt; item;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>bool _notNull(dynamic item) =&gt; item != null;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>extension LinqExt&lt;T&gt; on Iterable&lt;T&gt; {</code>
</line>
<line hits="3">
<code>  Iterable&lt;T&gt; asIterable() =&gt; map(_identity);</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  Iterable&lt;T&gt; skipLast() {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>    final keep = length - 1;</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>    return (keep &gt; 0) ? take(keep) : const [];</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  T? firstOrDefault(bool Function(T) predicate) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    if (isEmpty) return null;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>    for (var item in this) {</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      if (predicate(item)) return item;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    }</code>
</line>
<line hits="1">
<code>    return null;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  T? singleOrDefault(bool Function(T) predicate) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    if (isEmpty) return null;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    T? found;</code>
</line>
<line hits="3">
<code>    for (var item in this) {</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      if (predicate(item)) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>        if (found != null) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          throw LinqException('Several items match the predicate.');</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        }</code>
</line>
<line>
<code>        found = item;</code>
</line>
<line>
<code>      }</code>
</line>
<line>
<code>    }</code>
</line>
<line hits="1">
<code>    return found;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  Iterable&lt;T&gt; distinct() sync* {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    final seen = &lt;T&gt;{};</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>    for (var item in this) {</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      if (seen.add(item)) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>        yield item;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      }</code>
</line>
<line>
<code>    }</code>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
<line>
<code/>
</line>
<line>
<code>extension NullableLinqExt&lt;T&gt; on Iterable&lt;T?&gt; {</code>
</line>
<line hits="4">
<code>  Iterable&lt;T&gt; whereNotNull() =&gt; where(_notNull).cast&lt;T&gt;();</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
</lines>
<config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
<base href="../../"/>
<base href="../../"/>
</coverage>
