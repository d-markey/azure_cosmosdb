<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2023-01-04" filename="cosmos_db_exceptions.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.6034483" lines-covered="35" lines-valid="58" package="/src" testname="lcov.info" version="1.5">
<lines>
<line>
<code>import 'dart:async';</code>
</line>
<line>
<code/>
</line>
<line>
<code>import '_internal/_http_call.dart';</code>
</line>
<line>
<code>import '_internal/_http_status_codes.dart';</code>
</line>
<line>
<code/>
</line>
<line>
<code>abstract class InternalException implements Exception {</code>
</line>
<line hits="1">
<code>  InternalException._(String? message) : message = message ?? '';</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  final String message;</code>
</line>
<line>
<code/>
</line>
<line hits="0">
<code>  @override</code>
</line>
<line>
<code>  String toString() =&gt;</code>
</line>
<line hits="0">
<code>      message.isNotEmpty ? '$runtimeType: $message' : runtimeType.toString();</code>
</line>
<line>
<code>}</code>
</line>
<line>
<code/>
</line>
<line>
<code>class ApplicationException extends InternalException {</code>
</line>
<line hits="2">
<code>  ApplicationException(String message) : super._(message);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
<line>
<code/>
</line>
<line>
<code>class InvalidTokenException extends ApplicationException {</code>
</line>
<line hits="2">
<code>  InvalidTokenException(String message) : super(message);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
<line>
<code/>
</line>
<line>
<code>class PartitionKeyException extends ApplicationException {</code>
</line>
<line hits="0">
<code>  PartitionKeyException(String message) : super(message);</code>
</line>
<line>
<code>}</code>
</line>
<line>
<code/>
</line>
<line>
<code>abstract class ContextualizedException extends InternalException {</code>
</line>
<line hits="1">
<code>  ContextualizedException._(String method, this.url, String? message)</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      : method = method.toUpperCase(),</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>        super._(message);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  ContextualizedException _withContext(String method, String url);</code>
</line>
<line>
<code/>
</line>
<line>
<code>  final String method;</code>
</line>
<line>
<code>  final String url;</code>
</line>
<line>
<code/>
</line>
<line hits="0">
<code>  bool get hasContext =&gt; method.isNotEmpty &amp;&amp; url.isNotEmpty;</code>
</line>
<line>
<code/>
</line>
<line hits="0">
<code>  @override</code>
</line>
<line>
<code>  String toString() =&gt;</code>
</line>
<line hits="0">
<code>      hasContext ? '$method $url: ${super.toString()}' : super.toString();</code>
</line>
<line>
<code>}</code>
</line>
<line>
<code/>
</line>
<line>
<code>/// Base [CosmosDbException] class for CosmosDB errors.</code>
</line>
<line>
<code>class CosmosDbException extends ContextualizedException {</code>
</line>
<line hits="1">
<code>  CosmosDbException._(</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      String method, String url, this.statusCode, String? message)</code>
</line>
<line hits="1">
<code>      : super._(method, url, message ?? 'Error $statusCode');</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  factory CosmosDbException._internal(String method, String url, int statusCode,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      [String? message]) {</code>
</line>
<line hits="0">
<code>    message ??= 'Error $statusCode';</code>
</line>
<line>
<code>    switch (statusCode) {</code>
</line>
<line hits="1">
<code>      case HttpStatusCode.notModified:</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="0">
<code>        return NotModifiedException._('', '', message);</code>
</line>
<line hits="1">
<code>      case HttpStatusCode.unauthorized:</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>        return UnauthorizedException._('', '', message);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      case HttpStatusCode.forbidden:</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>        return ForbiddenException._('', '', message);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      case HttpStatusCode.notFound:</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>        return NotFoundException._('', '', message);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      case HttpStatusCode.conflict:</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>        return ConflictException._('', '', message);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      case HttpStatusCode.preconditionFailure:</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="0">
<code>        return PreconditionFailureException._('', '', message);</code>
</line>
<line>
<code>      default:</code>
</line>
<line hits="1">
<code>        return CosmosDbException._('', '', statusCode, message);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    }</code>
</line>
<line>
<code>  }</code>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  factory CosmosDbException(int statusCode, [String? message]) =&gt;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      CosmosDbException._internal('', '', statusCode, message);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  @override</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>  CosmosDbException _withContext(String method, String url) =&gt;</code>
</line>
<line hits="3">
<code>      CosmosDbException._internal(method, url, statusCode, message);</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  final int statusCode;</code>
</line>
<line>
<code>}</code>
</line>
<line>
<code/>
</line>
<line>
<code>class NotModifiedException extends CosmosDbException {</code>
</line>
<line hits="0">
<code>  NotModifiedException._(String method, String url, [String? message])</code>
</line>
<line hits="0">
<code>      : super._(method, url, HttpStatusCode.notModified, message);</code>
</line>
<line>
<code>}</code>
</line>
<line>
<code/>
</line>
<line>
<code>class UnauthorizedException extends CosmosDbException {</code>
</line>
<line hits="1">
<code>  UnauthorizedException._(String method, String url, [String? message])</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      : super._(method, url, HttpStatusCode.unauthorized, message);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
<line>
<code/>
</line>
<line>
<code>class ForbiddenException extends CosmosDbException {</code>
</line>
<line hits="1">
<code>  ForbiddenException._(String method, String url, [String? message])</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      : super._(method, url, HttpStatusCode.forbidden, message);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
<line>
<code/>
</line>
<line>
<code>class ConflictException extends CosmosDbException {</code>
</line>
<line hits="1">
<code>  ConflictException._(String method, String url, [String? message])</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      : super._(method, url, HttpStatusCode.conflict, message);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
<line>
<code/>
</line>
<line>
<code>class NotFoundException extends CosmosDbException {</code>
</line>
<line hits="1">
<code>  NotFoundException._(String method, String url, [String? message])</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      : super._(method, url, HttpStatusCode.notFound, message);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
<line>
<code/>
</line>
<line>
<code>class PreconditionFailureException extends CosmosDbException {</code>
</line>
<line hits="0">
<code>  PreconditionFailureException._(String method, String url, [String? message])</code>
</line>
<line hits="0">
<code>      : super._(method, url, HttpStatusCode.preconditionFailure, message);</code>
</line>
<line>
<code>}</code>
</line>
<line>
<code/>
</line>
<line>
<code>class UnknownDocumentTypeException extends ContextualizedException {</code>
</line>
<line hits="0">
<code>  UnknownDocumentTypeException._(String method, String url, this.docType)</code>
</line>
<line hits="0">
<code>      : super._(method, url, 'Unknown document type $docType');</code>
</line>
<line>
<code/>
</line>
<line hits="0">
<code>  UnknownDocumentTypeException(Type docType) : this._('', '', docType);</code>
</line>
<line>
<code/>
</line>
<line hits="0">
<code>  @override</code>
</line>
<line>
<code>  UnknownDocumentTypeException _withContext(String method, String url) =&gt;</code>
</line>
<line hits="0">
<code>      UnknownDocumentTypeException._(method, url, docType);</code>
</line>
<line>
<code/>
</line>
<line>
<code>  final Type docType;</code>
</line>
<line>
<code>}</code>
</line>
<line>
<code/>
</line>
<line>
<code>class BadResponseException extends ContextualizedException {</code>
</line>
<line hits="0">
<code>  BadResponseException._(String method, String url, String message)</code>
</line>
<line hits="0">
<code>      : super._(method, url, message);</code>
</line>
<line>
<code/>
</line>
<line hits="0">
<code>  BadResponseException(String message) : this._('', '', message);</code>
</line>
<line>
<code/>
</line>
<line hits="0">
<code>  @override</code>
</line>
<line>
<code>  BadResponseException _withContext(String method, String url) =&gt;</code>
</line>
<line hits="0">
<code>      BadResponseException._(method, url, message);</code>
</line>
<line>
<code>}</code>
</line>
<line>
<code/>
</line>
<line>
<code>// internal use</code>
</line>
<line>
<code>extension ContextualizedExceptionExt&lt;T&gt; on Future&lt;T&gt; {</code>
</line>
<line hits="1">
<code>  Future&lt;T&gt; rethrowContextualizedException(HttpCall call) =&gt;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      onError&lt;ContextualizedException&gt;((error, stackTrace) =&gt;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>          throw error._withContext(call.method.name, call.uri));</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
</lines>
<config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
<base href="../"/>
<base href="../"/>
</coverage>
