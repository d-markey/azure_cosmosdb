<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2022-12-08" filename="cosmos_db_users.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.88235295" lines-covered="30" lines-valid="34" package="/src/permissions" testname="lcov.info" version="1.5">
<lines>
<line>
<code>import '../client/_client.dart';</code>
</line>
<line>
<code>import '../client/_context.dart';</code>
</line>
<line>
<code>import '../cosmos_db_database.dart';</code>
</line>
<line>
<code>import '../cosmos_db_exceptions.dart';</code>
</line>
<line>
<code>import 'cosmos_db_permission.dart';</code>
</line>
<line>
<code>import 'cosmos_db_permissions.dart';</code>
</line>
<line>
<code>import 'cosmos_db_user.dart';</code>
</line>
<line>
<code/>
</line>
<line>
<code>@Deprecated('Use CosmosDbUsers instead.')</code>
</line>
<line>
<code>typedef Users = CosmosDbUsers;</code>
</line>
<line>
<code/>
</line>
<line>
<code>/// Class used to manage [CosmosDbUser]s in a CosmosDB [CosmosDbDatabase].</code>
</line>
<line>
<code>class CosmosDbUsers {</code>
</line>
<line hits="2">
<code>  CosmosDbUsers(CosmosDbDatabase db)</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      : database = db,</code>
</line>
<line hits="3">
<code>        url = '${db.url}/users';</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  final CosmosDbDatabase database;</code>
</line>
<line>
<code>  final String url;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Provides access to permissions associated with [CosmosDbUser]s.</code>
</line>
<line hits="3">
<code>  late final CosmosDbPermissions permissions = CosmosDbPermissions(this);</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Lists all collections from this [database].</code>
</line>
<line hits="2">
<code>  Future&lt;Iterable&lt;CosmosDbUser&gt;&gt; list({CosmosDbPermission? permission}) =&gt;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>      database.client.getMany&lt;CosmosDbUser&gt;(</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>        url,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        'Users',</code>
</line>
<line hits="2">
<code>        Context(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          type: 'users',</code>
</line>
<line hits="3">
<code>          resId: database.url,</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>          builder: CosmosDbUser.build,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="0">
<code>          token: permission?.token,</code>
</line>
<line>
<code>        ),</code>
</line>
<line hits="1">
<code>      );</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Deletes the user identified by [id]. By default, this method returns `true` if</code>
</line>
<line>
<code>  /// the user does not exists. If [throwOnNotFound] is set to `true`, it will throw a</code>
</line>
<line>
<code>  /// [NotFoundException] instead.</code>
</line>
<line hits="2">
<code>  Future&lt;bool&gt; delete(String id,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          {bool throwOnNotFound = false, CosmosDbPermission? permission}) =&gt;</code>
</line>
<line hits="4">
<code>      database.client.delete(</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>        '$url/$id',</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>        Context(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          type: 'users',</code>
</line>
<line>
<code>          throwOnNotFound: throwOnNotFound,</code>
</line>
<line hits="1">
<code>          builder: CosmosDbUser.build,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="0">
<code>          token: permission?.token,</code>
</line>
<line>
<code>        ),</code>
</line>
<line hits="1">
<code>      );</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Finds the user identified by [id]. By default, this method returns `null` if</code>
</line>
<line>
<code>  /// the user does not exists. If [throwOnNotFound] is set to `true`, it will throw a</code>
</line>
<line>
<code>  /// [NotFoundException] instead.</code>
</line>
<line hits="2">
<code>  Future&lt;CosmosDbUser?&gt; find(String id,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          {bool throwOnNotFound = false, CosmosDbPermission? permission}) =&gt;</code>
</line>
<line hits="4">
<code>      database.client.get&lt;CosmosDbUser&gt;(</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>        '$url/$id',</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>        Context(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          type: 'users',</code>
</line>
<line>
<code>          throwOnNotFound: throwOnNotFound,</code>
</line>
<line hits="1">
<code>          builder: CosmosDbUser.build,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="0">
<code>          token: permission?.token,</code>
</line>
<line>
<code>        ),</code>
</line>
<line hits="1">
<code>      );</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Adds [user] to the [database] the user identified by [id]. By default, this method returns `null` if</code>
</line>
<line>
<code>  /// the user does not exists. If [throwOnNotFound] is set to `true`, it will throw a</code>
</line>
<line>
<code>  /// [NotFoundException] instead.</code>
</line>
<line hits="2">
<code>  Future&lt;CosmosDbUser&gt; add(CosmosDbUser user,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          {CosmosDbPermission? permission}) =&gt;</code>
</line>
<line hits="4">
<code>      database.client.post&lt;CosmosDbUser&gt;(</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>        url,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        user,</code>
</line>
<line hits="2">
<code>        Context(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>          resId: database.url,</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          type: 'users',</code>
</line>
<line hits="1">
<code>          builder: CosmosDbUser.build,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="0">
<code>          token: permission?.token,</code>
</line>
<line>
<code>        ),</code>
</line>
<line hits="1">
<code>      );</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
<line>
<code/>
</line>
<line>
<code>// internal use</code>
</line>
<line>
<code>extension CosmosDbUsersExt on CosmosDbUsers {</code>
</line>
<line hits="4">
<code>  Client get client =&gt; database.client;</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
</lines>
<config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
<base href="../../"/>
<base href="../../"/>
</coverage>
