<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2023-01-07" filename="polygon.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.85714287" lines-covered="30" lines-valid="35" package="/src/spatial" testname="lcov.info" version="1.5">
<lines>
<line>
<code>import '../_internal/_linq_extensions.dart';</code>
</line>
<line>
<code>import '../indexing/data_type.dart';</code>
</line>
<line>
<code>import '../indexing/geospatial_config.dart';</code>
</line>
<line>
<code>import 'line_string.dart';</code>
</line>
<line>
<code>import 'point.dart';</code>
</line>
<line>
<code>import 'shape.dart';</code>
</line>
<line>
<code/>
</line>
<line>
<code>class Polygon extends Shape {</code>
</line>
<line>
<code>  @override</code>
</line>
<line>
<code>  final type = DataType.polygon;</code>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  final _rings = &lt;LineString&gt;[];</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  Polygon();</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  @override</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>  List get coordinates =&gt; rings.map((r) {</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>        final coords = r.coordinates;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>        coords.add(coords[0]);</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>        return coords;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      }).toList();</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// `true` iif the polygon contains no ring.</code>
</line>
<line hits="3">
<code>  bool get isEmpty =&gt; rings.isEmpty;</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// `true` iif the polygon contains one or more rings.</code>
</line>
<line hits="3">
<code>  bool get isNotEmpty =&gt; rings.isNotEmpty;</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  @override</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  Iterable&lt;Iterable&lt;Point&gt;&gt; get paths =&gt;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="8">
<code>      rings.map((r) =&gt; r.points.followedBy(r.points.take(1)));</code>
<hit count="8" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// List of rings. Rings are represented by line-strings and should not repeat</code>
</line>
<line>
<code>  /// first/last points. During serialization, the first point of each ring is</code>
</line>
<line>
<code>  /// repeated automatically to meet GeoJSON requirements.</code>
</line>
<line hits="4">
<code>  Iterable&lt;LineString&gt; get rings =&gt; _rings.asIterable();</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Adds a ring to the polygon.</code>
</line>
<line hits="4">
<code>  void add(LineString ring) =&gt; _rings.add(ring);</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Adds a set of rings to the polygon.</code>
</line>
<line hits="4">
<code>  void addAll(Iterable&lt;LineString&gt; rings) =&gt; _rings.addAll(rings);</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Inverts the polygon by copying the rings of the current instance, only</code>
</line>
<line>
<code>  /// walking the ring points in reversed order.</code>
</line>
<line hits="0">
<code>  Polygon invert() =&gt; Polygon()</code>
</line>
<line hits="0">
<code>    ..addAll(</code>
</line>
<line hits="0">
<code>      rings.map(</code>
</line>
<line hits="0">
<code>        (r) =&gt; LineString()..addAll(r.reversed),</code>
</line>
<line>
<code>      ),</code>
</line>
<line hits="0">
<code>    );</code>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  static Polygon fromGeoJson(Map geoJson, GeospatialConfig config) =&gt;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      Shape.fromGeoJson&lt;Polygon&gt;(geoJson, config);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="3">
<code>  static Polygon loadGeographyCoords(Iterable coords) =&gt; Polygon()</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    ..addAll(</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>      coords.cast&lt;Iterable&gt;().map(_Ring.loadGeographyCoords),</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    );</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="3">
<code>  static Polygon loadGeometryCoords(Iterable coords) =&gt; Polygon()</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    ..addAll(</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>      coords.cast&lt;Iterable&gt;().map(_Ring.loadGeometryCoords),</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    );</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
<line>
<code/>
</line>
<line>
<code>class _Ring {</code>
</line>
<line hits="2">
<code>  static LineString loadGeographyCoords(Iterable coords) =&gt;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>      LineString.loadGeographyCoords(coords.skipLast());</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  static LineString loadGeometryCoords(Iterable coords) =&gt;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>      LineString.loadGeometryCoords(coords.skipLast());</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
</lines>
<config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
<base href="../../"/>
<base href="../../"/>
</coverage>
