<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2025-01-06" filename="point.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.9" lines-covered="27" lines-valid="30" package="src/spatial" testname="lcov.info" version="1.6">
<lines>
<line number="1">
<code>import '../indexing/data_type.dart';</code>
</line>
<line number="2">
<code>import '../indexing/geospatial_config.dart';</code>
</line>
<line number="3">
<code>import 'shape.dart';</code>
</line>
<line number="4">
<code/>
</line>
<line number="5">
<code>/// Class represengin a position.</code>
</line>
<line number="6">
<code>class Point extends Shape {</code>
</line>
<line number="7">
<code>  @override</code>
</line>
<line number="8">
<code>  final type = DataType.point;</code>
</line>
<line number="9">
<code/>
</line>
<line number="10">
<code>  /// The position's X coordinate.</code>
</line>
<line number="11">
<code>  final num? x;</code>
</line>
<line number="12">
<code/>
</line>
<line number="13">
<code>  /// The position's Y coordinate.</code>
</line>
<line number="14">
<code>  final num? y;</code>
</line>
<line number="15">
<code/>
</line>
<line number="16">
<code>  /// The position's latitude.</code>
</line>
<line number="17">
<code>  final num? latitude;</code>
</line>
<line number="18">
<code/>
</line>
<line number="19">
<code>  /// The position's longitude.</code>
</line>
<line number="20">
<code>  final num? longitude;</code>
</line>
<line number="21">
<code/>
</line>
<line number="22">
<code>  /// The position's altitude.</code>
</line>
<line number="23">
<code>  final num? altitude;</code>
</line>
<line number="24">
<code/>
</line>
<line number="25">
<code>  /// `(lat, long)` position.</code>
</line>
<line hits="2" number="26">
<code>  const Point.geography(this.latitude, this.longitude, [this.altitude])</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="27">
<code>      : assert(latitude != null),</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="28">
<code>        assert(longitude != null),</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="29">
<code>        x = null,</code>
</line>
<line number="30">
<code>        y = null;</code>
</line>
<line number="31">
<code/>
</line>
<line number="32">
<code>  /// `(x, y)` position.</code>
</line>
<line hits="1" number="33">
<code>  const Point.geometry(this.x, this.y, [num? z])</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="34">
<code>      : assert(x != null),</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="35">
<code>        assert(y != null),</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="36">
<code>        latitude = null,</code>
</line>
<line number="37">
<code>        longitude = null,</code>
</line>
<line number="38">
<code>        altitude = z;</code>
</line>
<line number="39">
<code/>
</line>
<line number="40">
<code>  /// Coordinates pair, either `(x, y)` or `(long, lat)`.</code>
</line>
<line hits="1" number="41">
<code>  @override</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="42">
<code>  List&lt;num&gt; get coordinates =&gt; isGeometry</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="4" number="43">
<code>      ? [x!, y!, if (altitude != null) altitude!]</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="4" number="44">
<code>      : [longitude!, latitude!, if (altitude != null) altitude!];</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line number="45">
<code/>
</line>
<line number="46">
<code>  /// `true` iif [latitude] and [longitude] are non-null.</code>
</line>
<line hits="3" number="47">
<code>  bool get isGeographic =&gt; (latitude != null &amp;&amp; longitude != null);</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line number="48">
<code/>
</line>
<line number="49">
<code>  /// `true` iif [x] and [y] are non-null.</code>
</line>
<line hits="3" number="50">
<code>  bool get isGeometry =&gt; (x != null &amp;&amp; y != null);</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line number="51">
<code/>
</line>
<line hits="0" number="52">
<code>  @override</code>
</line>
<line hits="0" number="53">
<code>  Iterable&lt;Iterable&lt;Point&gt;&gt; get paths =&gt; [</code>
</line>
<line hits="0" number="54">
<code>        [this]</code>
</line>
<line number="55">
<code>      ];</code>
</line>
<line number="56">
<code/>
</line>
<line number="57">
<code>  /// The position's Z coordinate. Returns the [altitude] (which may be `null`)</code>
</line>
<line number="58">
<code>  /// if the position is geometrical, `null` otherwise.</code>
</line>
<line hits="3" number="59">
<code>  num? get z =&gt; isGeometry ? altitude : null;</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line number="60">
<code/>
</line>
<line number="61">
<code>  /// Hydrates a new [Point] instance using the JSON data in [geoJson].</code>
</line>
<line hits="1" number="62">
<code>  static Point fromGeoJson(Map geoJson, GeospatialConfig config) =&gt;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="63">
<code>      Shape.fromGeoJson&lt;Point&gt;(geoJson, config);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="64">
<code/>
</line>
<line hits="1" number="65">
<code>  static Point loadGeographyCoords(Iterable coords) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="66">
<code>    final c = (coords is List) ? coords : coords.toList();</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="67">
<code>    final lat = c[1];</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="68">
<code>    final long = c[0];</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2" number="69">
<code>    final alt = (c.length &gt;= 3) ? c[2] : null;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="70">
<code>    return Point.geography(lat, long, alt);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="71">
<code>  }</code>
</line>
<line number="72">
<code/>
</line>
<line hits="1" number="73">
<code>  static Point loadGeometryCoords(Iterable coords) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="74">
<code>    final c = (coords is List) ? coords : coords.toList();</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="75">
<code>    final x = c[0];</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="76">
<code>    final y = c[1];</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2" number="77">
<code>    final alt = (c.length &gt;= 3) ? c[2] : null;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="78">
<code>    return Point.geometry(x, y, alt);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="79">
<code>  }</code>
</line>
<line number="80">
<code>}</code>
</line>
</lines>
<config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false" show-details="false"/>
<base href="../../"/>
<base href="../../"/>
</coverage>
