<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2023-01-04" filename="shape.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.75" lines-covered="12" lines-valid="16" package="/src/spatial" testname="lcov.info" version="1.5">
<lines>
<line>
<code>import '../cosmos_db_exceptions.dart';</code>
</line>
<line>
<code>import '../indexing/data_type.dart';</code>
</line>
<line>
<code>import '../indexing/geospatial_config.dart';</code>
</line>
<line>
<code>import 'line_string.dart';</code>
</line>
<line>
<code>import 'multi_polygon.dart';</code>
</line>
<line>
<code>import 'point.dart';</code>
</line>
<line>
<code>import 'polygon.dart';</code>
</line>
<line>
<code/>
</line>
<line>
<code>typedef ShapeLoader = Shape Function(Iterable geoJson);</code>
</line>
<line>
<code/>
</line>
<line>
<code>/// Base class for shapes.</code>
</line>
<line>
<code>abstract class Shape {</code>
</line>
<line>
<code>  /// Shape --&gt; DataType map</code>
</line>
<line>
<code>  static const _map = {</code>
</line>
<line>
<code>    Point: DataType.point,</code>
</line>
<line>
<code>    LineString: DataType.lineString,</code>
</line>
<line>
<code>    Polygon: DataType.polygon,</code>
</line>
<line>
<code>    MultiPolygon: DataType.multiPolygon,</code>
</line>
<line>
<code>  };</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Loaders for DataType and GeospatialConfig</code>
</line>
<line>
<code>  static const _loaders = &lt;DataType, Map&lt;GeospatialConfig, ShapeLoader&gt;&gt;{</code>
</line>
<line>
<code>    DataType.point: {</code>
</line>
<line>
<code>      GeospatialConfig.geography: Point.loadGeographyCoords,</code>
</line>
<line>
<code>      GeospatialConfig.geometry: Point.loadGeometryCoords,</code>
</line>
<line>
<code>    },</code>
</line>
<line>
<code>    DataType.lineString: {</code>
</line>
<line>
<code>      GeospatialConfig.geography: LineString.loadGeographyCoords,</code>
</line>
<line>
<code>      GeospatialConfig.geometry: LineString.loadGeometryCoords,</code>
</line>
<line>
<code>    },</code>
</line>
<line>
<code>    DataType.polygon: {</code>
</line>
<line>
<code>      GeospatialConfig.geography: Polygon.loadGeographyCoords,</code>
</line>
<line>
<code>      GeospatialConfig.geometry: Polygon.loadGeometryCoords,</code>
</line>
<line>
<code>    },</code>
</line>
<line>
<code>    DataType.multiPolygon: {</code>
</line>
<line>
<code>      GeospatialConfig.geography: MultiPolygon.loadGeographyCoords,</code>
</line>
<line>
<code>      GeospatialConfig.geometry: MultiPolygon.loadGeometryCoords,</code>
</line>
<line>
<code>    },</code>
</line>
<line>
<code>  };</code>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  const Shape();</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// The shape's coordinates that will be serialized to the 'coordinates'</code>
</line>
<line>
<code>  /// GeoJSON field.</code>
</line>
<line>
<code>  List get coordinates;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// The shape's sets of points.</code>
</line>
<line>
<code>  Iterable&lt;Iterable&lt;Point&gt;&gt; get paths;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// The shape's data type that will be serialized to the 'type' GeoJSON field.</code>
</line>
<line>
<code>  DataType get type;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Serialize to GeoJSON.</code>
</line>
<line hits="2">
<code>  Map&lt;String, dynamic&gt; toJson() =&gt; toGeoJson();</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Serialize to GeoJSON.</code>
</line>
<line hits="2">
<code>  Map&lt;String, dynamic&gt; toGeoJson() =&gt; {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>        'type': type.name,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>        'coordinates': coordinates,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      };</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Deserialize from GeoJSON.</code>
</line>
<line hits="1">
<code>  static T fromGeoJson&lt;T&gt;(Map json, GeospatialConfig config) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    final spatialType = _map[T]!;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    final type = json['type']?.toString() ?? '';</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>    if (type.toLowerCase() != spatialType.name.toLowerCase()) {</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="0">
<code>      throw BadResponseException(</code>
</line>
<line hits="0">
<code>          'Invalid type \'$type\'. Expected ${spatialType.name}');</code>
</line>
<line>
<code>    }</code>
</line>
<line hits="1">
<code>    final coords = json['coordinates'] as List?;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    if (coords == null) {</code>
</line>
<line hits="0">
<code>      throw BadResponseException(</code>
</line>
<line>
<code>          'Invalid GeoJSON: missing entry \'coordinates\'');</code>
</line>
<line>
<code>    }</code>
</line>
<line hits="2">
<code>    final loader = _loaders[spatialType]?[config];</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    if (loader == null) {</code>
</line>
<line hits="0">
<code>      throw BadResponseException('No loader for type \'${spatialType.name}\'');</code>
</line>
<line>
<code>    }</code>
</line>
<line hits="1">
<code>    return loader(coords) as T;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>  }</code>
</line>
<line>
<code>}</code>
</line>
</lines>
<config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
<base href="../../"/>
<base href="../../"/>
</coverage>
