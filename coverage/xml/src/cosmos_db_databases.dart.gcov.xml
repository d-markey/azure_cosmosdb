<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2025-01-06" filename="cosmos_db_databases.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="1.0" lines-covered="35" lines-valid="35" package="src" testname="lcov.info" version="1.6">
<lines>
<line number="1">
<code>import 'package:meta/meta.dart';</code>
</line>
<line number="2">
<code/>
</line>
<line number="3">
<code>import 'authorizations/cosmos_db_authorization.dart';</code>
</line>
<line number="4">
<code>import 'authorizations/cosmos_db_permission.dart';</code>
</line>
<line number="5">
<code>import 'client/_client.dart';</code>
</line>
<line number="6">
<code>import 'client/_context.dart';</code>
</line>
<line number="7">
<code>import 'cosmos_db_database.dart';</code>
</line>
<line number="8">
<code>import 'cosmos_db_exceptions.dart';</code>
</line>
<line number="9">
<code>import 'cosmos_db_server.dart';</code>
</line>
<line number="10">
<code>import 'cosmos_db_throughput.dart';</code>
</line>
<line number="11">
<code/>
</line>
<line number="12">
<code>/// Class used to manage [CosmosDbDatabase]s in a [CosmosDbServer].</code>
</line>
<line number="13">
<code>class CosmosDbDatabases {</code>
</line>
<line hits="1" number="14">
<code>  CosmosDbDatabases(this.server) : _url = 'dbs';</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="15">
<code/>
</line>
<line number="16">
<code>  /// The hosting [CosmosDbServer].</code>
</line>
<line number="17">
<code>  final CosmosDbServer server;</code>
</line>
<line number="18">
<code/>
</line>
<line number="19">
<code>  final String _url;</code>
</line>
<line number="20">
<code/>
</line>
<line hits="1" number="21">
<code>  CosmosDbDatabase _build(Map json) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3" number="22">
<code>    final db = CosmosDbDatabase(server, json['id']);</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="23">
<code>    db.setExists(true);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="24">
<code>    return db;</code>
</line>
<line number="25">
<code>  }</code>
</line>
<line number="26">
<code/>
</line>
<line number="27">
<code>  /// Lists all databases from this [server].</code>
</line>
<line hits="1" number="28">
<code>  Future&lt;Iterable&lt;CosmosDbDatabase&gt;&gt; list(</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="29">
<code>          {CosmosDbPermission? permission,</code>
</line>
<line number="30">
<code>          CosmosDbAuthorization? authorization}) =&gt;</code>
</line>
<line hits="2" number="31">
<code>      client.getMany&lt;CosmosDbDatabase&gt;(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="32">
<code>        _url,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="33">
<code>        'Databases',</code>
</line>
<line hits="1" number="34">
<code>        Context(</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="35">
<code>          type: 'dbs',</code>
</line>
<line number="36">
<code>          resId: '',</code>
</line>
<line hits="1" number="37">
<code>          builder: _build,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="38">
<code>          authorization: CosmosDbAuthorization.from(authorization, permission),</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="39">
<code>        ),</code>
</line>
<line number="40">
<code>      );</code>
</line>
<line number="41">
<code/>
</line>
<line number="42">
<code>  /// Deletes the specified [database] from this [server]. All containers and associated</code>
</line>
<line number="43">
<code>  /// documents will be lost. If the [database] does not exists, this method returns</code>
</line>
<line number="44">
<code>  /// `true` by default. if [throwOnNotFound] is set to `true`, it will throw a</code>
</line>
<line number="45">
<code>  /// [NotFoundException] instead. Upon success, the [CosmosDbDatabase.exists] flag will</code>
</line>
<line number="46">
<code>  /// be set to `false`.</code>
</line>
<line hits="1" number="47">
<code>  Future&lt;bool&gt; delete(CosmosDbDatabase database,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="48">
<code>          {bool throwOnNotFound = false,</code>
</line>
<line number="49">
<code>          CosmosDbPermission? permission,</code>
</line>
<line number="50">
<code>          CosmosDbAuthorization? authorization}) =&gt;</code>
</line>
<line hits="1" number="51">
<code>      client</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="52">
<code>          .delete(</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3" number="53">
<code>              '$_url/${database.id}',</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="54">
<code>              Context(</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="55">
<code>                type: 'dbs',</code>
</line>
<line number="56">
<code>                throwOnNotFound: throwOnNotFound,</code>
</line>
<line number="57">
<code>                authorization:</code>
</line>
<line hits="1" number="58">
<code>                    CosmosDbAuthorization.from(authorization, permission),</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="59">
<code>              ))</code>
</line>
<line hits="2" number="60">
<code>          .then((value) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="61">
<code>        database.setExists(false);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="62">
<code>        return true;</code>
</line>
<line number="63">
<code>      });</code>
</line>
<line number="64">
<code/>
</line>
<line number="65">
<code>  /// Creates a new [CosmosDbDatabase] with the specified `name`.</code>
</line>
<line hits="1" number="66">
<code>  Future&lt;CosmosDbDatabase&gt; create(</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="67">
<code>    String name, {</code>
</line>
<line number="68">
<code>    CosmosDbPermission? permission,</code>
</line>
<line number="69">
<code>    CosmosDbAuthorization? authorization,</code>
</line>
<line number="70">
<code>    CosmosDbThroughput? throughput,</code>
</line>
<line number="71">
<code>  }) =&gt;</code>
</line>
<line hits="2" number="72">
<code>      client.post&lt;CosmosDbDatabase&gt;(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="73">
<code>        _url,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2" number="74">
<code>        CosmosDbDatabase(server, name),</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="75">
<code>        Context(</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="76">
<code>          type: 'dbs',</code>
</line>
<line number="77">
<code>          resId: '',</code>
</line>
<line hits="1" number="78">
<code>          headers: throughput?.header,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="79">
<code>          builder: _build,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="80">
<code>          authorization: CosmosDbAuthorization.from(authorization, permission),</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="81">
<code>        ),</code>
</line>
<line number="82">
<code>      );</code>
</line>
<line number="83">
<code/>
</line>
<line number="84">
<code>  /// Opens an existing [CosmosDbDatabase] with the specified `name`.</code>
</line>
<line hits="1" number="85">
<code>  Future&lt;CosmosDbDatabase&gt; open(String name,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="86">
<code>      {CosmosDbPermission? permission,</code>
</line>
<line number="87">
<code>      CosmosDbAuthorization? authorization}) async {</code>
</line>
<line hits="2" number="88">
<code>    final db = CosmosDbDatabase(server, name);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="89">
<code>    await db.getInfo(permission: permission, authorization: authorization);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="90">
<code>    db.setExists(true);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="91">
<code>    return db;</code>
</line>
<line number="92">
<code>  }</code>
</line>
<line number="93">
<code/>
</line>
<line number="94">
<code>  /// Opens or creates a [CosmosDbDatabase] with the specified `name`.</code>
</line>
<line hits="1" number="95">
<code>  Future&lt;CosmosDbDatabase&gt; openOrCreate(</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="96">
<code>    String name, {</code>
</line>
<line number="97">
<code>    CosmosDbPermission? permission,</code>
</line>
<line number="98">
<code>    CosmosDbAuthorization? authorization,</code>
</line>
<line number="99">
<code>    CosmosDbThroughput? throughput,</code>
</line>
<line number="100">
<code>  }) async {</code>
</line>
<line number="101">
<code>    try {</code>
</line>
<line hits="1" number="102">
<code>      return await open(name,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="103">
<code>          permission: permission, authorization: authorization);</code>
</line>
<line hits="1" number="104">
<code>    } on NotFoundException {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="105">
<code>      return await create(name,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="106">
<code>          permission: permission,</code>
</line>
<line number="107">
<code>          authorization: authorization,</code>
</line>
<line number="108">
<code>          throughput: throughput);</code>
</line>
<line number="109">
<code>    }</code>
</line>
<line number="110">
<code>  }</code>
</line>
<line number="111">
<code>}</code>
</line>
<line number="112">
<code/>
</line>
<line number="113">
<code>// internal use</code>
</line>
<line number="114">
<code>@internal</code>
</line>
<line number="115">
<code>extension CosmosDbDatabasesInternalExt on CosmosDbDatabases {</code>
</line>
<line hits="3" number="116">
<code>  Client get client =&gt; server.client;</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line number="117">
<code>}</code>
</line>
</lines>
<config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false" show-details="false"/>
<base href="../"/>
<base href="../"/>
</coverage>
