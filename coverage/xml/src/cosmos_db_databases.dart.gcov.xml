<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2023-01-07" filename="cosmos_db_databases.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.93333334" lines-covered="42" lines-valid="45" package="/src" testname="lcov.info" version="1.5">
<lines>
<line>
<code>import 'client/_client.dart';</code>
</line>
<line>
<code>import 'client/_context.dart';</code>
</line>
<line>
<code>import 'cosmos_db_database.dart';</code>
</line>
<line>
<code>import 'cosmos_db_exceptions.dart';</code>
</line>
<line>
<code>import 'cosmos_db_throughput.dart';</code>
</line>
<line>
<code>import 'permissions/cosmos_db_permission.dart';</code>
</line>
<line>
<code>import 'cosmos_db_server.dart';</code>
</line>
<line>
<code/>
</line>
<line>
<code>/// Class used to manage [CosmosDbDatabase]s in a [CosmosDbServer].</code>
</line>
<line>
<code>class CosmosDbDatabases {</code>
</line>
<line hits="2">
<code>  CosmosDbDatabases(this.server) : _url = 'dbs';</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// The hosting [CosmosDbServer].</code>
</line>
<line>
<code>  final CosmosDbServer server;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  final String _url;</code>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  CosmosDbDatabase _build(Map json) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>    final db = CosmosDbDatabase(server, json['id']);</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    db.setExists(true);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    return db;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Lists all databases from this [server].</code>
</line>
<line hits="2">
<code>  Future&lt;Iterable&lt;CosmosDbDatabase&gt;&gt; list({CosmosDbPermission? permission}) =&gt;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>      client.getMany&lt;CosmosDbDatabase&gt;(</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>        _url,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        'Databases',</code>
</line>
<line hits="2">
<code>        Context(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          type: 'dbs',</code>
</line>
<line>
<code>          resId: '',</code>
</line>
<line hits="2">
<code>          builder: _build,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="0">
<code>          token: permission?.token,</code>
</line>
<line>
<code>        ),</code>
</line>
<line hits="1">
<code>      );</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Deletes the specified [database] from this [server]. All containers and associated</code>
</line>
<line>
<code>  /// documents will be lost. If the [database] does not exists, this method returns</code>
</line>
<line>
<code>  /// `true` by default. if [throwOnNotFound] is set to `true`, it will throw a</code>
</line>
<line>
<code>  /// [NotFoundException] instead. Upon success, the [CosmosDbDatabase.exists] flag will</code>
</line>
<line>
<code>  /// be set to `false`.</code>
</line>
<line hits="2">
<code>  Future&lt;bool&gt; delete(CosmosDbDatabase database,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          {bool throwOnNotFound = false, CosmosDbPermission? permission}) =&gt;</code>
</line>
<line hits="2">
<code>      client</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>          .delete(</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>              '$_url/${database.id}',</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>              Context(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>                type: 'dbs',</code>
</line>
<line>
<code>                throwOnNotFound: throwOnNotFound,</code>
</line>
<line hits="0">
<code>                token: permission?.token,</code>
</line>
<line>
<code>              ))</code>
</line>
<line hits="3">
<code>          .then((value) {</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>        database.setExists(false);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>        return true;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      });</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Creates a new [CosmosDbDatabase] with the specified `name`.</code>
</line>
<line hits="2">
<code>  Future&lt;CosmosDbDatabase&gt; create(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    String name, {</code>
</line>
<line>
<code>    CosmosDbPermission? permission,</code>
</line>
<line>
<code>    CosmosDbThroughput? throughput,</code>
</line>
<line>
<code>  }) =&gt;</code>
</line>
<line hits="3">
<code>      client.post&lt;CosmosDbDatabase&gt;(</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>        _url,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>        CosmosDbDatabase(server, name),</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>        Context(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          type: 'dbs',</code>
</line>
<line>
<code>          resId: '',</code>
</line>
<line hits="2">
<code>          headers: throughput?.header,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          builder: _build,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="0">
<code>          token: permission?.token,</code>
</line>
<line>
<code>        ),</code>
</line>
<line hits="1">
<code>      );</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Opens an existing [CosmosDbDatabase] with the specified `name`.</code>
</line>
<line hits="2">
<code>  Future&lt;CosmosDbDatabase&gt; open(String name,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      {CosmosDbPermission? permission}) async {</code>
</line>
<line hits="3">
<code>    final db = CosmosDbDatabase(server, name);</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    await db.getInfo(permission: permission);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    db.setExists(true);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    return db;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Opens or creates a [CosmosDbDatabase] with the specified `name`.</code>
</line>
<line hits="2">
<code>  Future&lt;CosmosDbDatabase&gt; openOrCreate(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    String name, {</code>
</line>
<line>
<code>    CosmosDbPermission? permission,</code>
</line>
<line>
<code>    CosmosDbThroughput? throughput,</code>
</line>
<line>
<code>  }) async {</code>
</line>
<line hits="1">
<code>    try {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      return await open(name, permission: permission);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    } on NotFoundException {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      return await create(name, permission: permission, throughput: throughput);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    }</code>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
<line>
<code/>
</line>
<line>
<code>// internal use</code>
</line>
<line>
<code>extension DatabasesExt on CosmosDbDatabases {</code>
</line>
<line hits="4">
<code>  Client get client =&gt; server.client;</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
</lines>
<config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
<base href="../"/>
<base href="../"/>
</coverage>
