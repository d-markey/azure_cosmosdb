<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2023-01-14" filename="transactional_batch.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.9811321" lines-covered="52" lines-valid="53" package="/src/batch" testname="lcov.info" version="1.5">
<lines>
<line>
<code>import '../_internal/_http_header.dart';</code>
</line>
<line>
<code>import '../_internal/_linq_extensions.dart';</code>
</line>
<line>
<code>import '../client/http_status_codes.dart';</code>
</line>
<line>
<code>import '../cosmos_db_container.dart';</code>
</line>
<line>
<code>import '../cosmos_db_exceptions.dart';</code>
</line>
<line>
<code>import '../partition/partition_key_range.dart';</code>
</line>
<line>
<code>import '../permissions/cosmos_db_permission.dart';</code>
</line>
<line>
<code>import 'batch.dart';</code>
</line>
<line>
<code>import 'batch_operation.dart';</code>
</line>
<line>
<code>import 'batch_response.dart';</code>
</line>
<line>
<code/>
</line>
<line>
<code>class TransactionalBatch extends Batch {</code>
</line>
<line hits="1">
<code>  TransactionalBatch._(this.container,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      {required this.isAtomic, required this.continueOnError});</code>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  TransactionalBatch.atomic(CosmosDbContainer container)</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      : this._(container, isAtomic: true, continueOnError: false);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  TransactionalBatch(CosmosDbContainer container, {bool continueOnError = true})</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      : this._(container, isAtomic: false, continueOnError: continueOnError);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  @override</code>
</line>
<line>
<code>  final CosmosDbContainer container;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Returns the HTTP headers for this batch request (retrieves the partition key</code>
</line>
<line>
<code>  /// range ID and maps properties [isAtomic] and [continueOnError]).</code>
</line>
<line hits="2">
<code>  Map&lt;String, String&gt; getHeaders(Iterable&lt;PartitionKeyRange&gt; pkRanges) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="7">
<code>    final pk = _ops.map((op) =&gt; op.partitionKey).whereNotNull().distinct();</code>
<hit count="7" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    if (pk.isEmpty) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="0">
<code>      throw PartitionKeyException('Missing partition key.');</code>
</line>
<line hits="3">
<code>    } else if (pk.length &gt; 1) {</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      throw PartitionKeyException(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          'Partition keys map to several partition key ranges.');</code>
</line>
<line>
<code>    }</code>
</line>
<line hits="3">
<code>    final pkr = pkRanges.findRangeFor(pk.single);</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    return {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      HttpHeader.msCosmosIsBatchRequest: 'true',</code>
</line>
<line hits="2">
<code>      HttpHeader.msCosmosBatchAtomic: isAtomic ? 'true' : 'false',</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      HttpHeader.msCosmosBatchContinueOnError:</code>
</line>
<line hits="2">
<code>          continueOnError ? 'true' : 'false',</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      HttpHeader.msDocumentDbPartitionKeyRangeId: pkr!.id,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    };</code>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  @override</code>
</line>
<line>
<code>  final bool continueOnError;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  @override</code>
</line>
<line>
<code>  final bool isAtomic;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  @override</code>
</line>
<line>
<code>  final bool isCrossPartition = false;</code>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  @override</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>  int get length =&gt; _ops.length;</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  @override</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>  Iterable&lt;BatchOperation&gt; get operations =&gt; _ops.asIterable();</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  final _ops = &lt;BatchOperation&gt;[];</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  @override</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>  void recycle() =&gt; _ops.clear();</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  @override</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  void add(BatchOperation op) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="5">
<code>    if (_ops.length &gt;= 100 &amp;&amp; isAtomic) {</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      throw ApplicationException(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          'Transactional batch is limited to 100 operations.');</code>
</line>
<line>
<code>    }</code>
</line>
<line hits="3">
<code>    _ops.add(op);</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  @override</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  Future&lt;BatchResponse&gt; execute({CosmosDbPermission? permission}) async {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>    if (_ops.length &lt;= 100) {</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>      return await container.execute(this, permission: permission);</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    } else {</code>
</line>
<line hits="1">
<code>      final resp = BatchResponse();</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      final batch = _clone();</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      var index = 0;</code>
</line>
<line hits="4">
<code>      while (index &lt; _ops.length) {</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>        batch._ops.clear();</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="6">
<code>        batch._ops.addAll(_ops.skip(index).take(100));</code>
<hit count="6" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>        index += 100;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>        final r = await batch.execute(permission: permission);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>        resp.addAll(r.results);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>        if (!continueOnError &amp;&amp; !r.isSuccess) {</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          final err = {'statusCode': HttpStatusCode.failedDependency};</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>          for (var i = index; i &lt; _ops.length; i++) {</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>            resp.add(_ops[i].setResult(err, null));</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          }</code>
</line>
<line hits="1">
<code>          break;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        }</code>
</line>
<line>
<code>      }</code>
</line>
<line hits="1">
<code>      return resp;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    }</code>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="3">
<code>  TransactionalBatch _clone() =&gt; TransactionalBatch._(container,</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      isAtomic: isAtomic, continueOnError: continueOnError);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  @override</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="6">
<code>  List&lt;dynamic&gt; toJson() =&gt; _ops.map((o) =&gt; o.toJson()).toList();</code>
<hit count="6" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
</lines>
<config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
<base href="../../"/>
<base href="../../"/>
</coverage>
