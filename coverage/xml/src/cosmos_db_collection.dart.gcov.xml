<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2022-12-08" filename="cosmos_db_collection.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.9302326" lines-covered="120" lines-valid="129" package="/src" testname="lcov.info" version="1.5">
<lines>
<line>
<code>import 'base_document.dart';</code>
</line>
<line>
<code>import 'client/_client.dart';</code>
</line>
<line>
<code>import 'client/_context.dart';</code>
</line>
<line>
<code>import 'cosmos_db_database.dart';</code>
</line>
<line>
<code>import 'cosmos_db_exceptions.dart';</code>
</line>
<line>
<code>import 'indexing/geospatial_config.dart';</code>
</line>
<line>
<code>import 'indexing/indexing_policy.dart';</code>
</line>
<line>
<code>import 'indexing/partition.dart';</code>
</line>
<line>
<code>import 'permissions/cosmos_db_permission.dart';</code>
</line>
<line>
<code>import 'queries/query.dart';</code>
</line>
<line>
<code>import 'cosmos_db_server.dart';</code>
</line>
<line>
<code/>
</line>
<line>
<code>@Deprecated('Use CosmosDbCollection instead.')</code>
</line>
<line>
<code>typedef Collection = CosmosDbCollection;</code>
</line>
<line>
<code/>
</line>
<line>
<code>/// Class representing a CosmosDB collection.</code>
</line>
<line>
<code>class CosmosDbCollection extends BaseDocument {</code>
</line>
<line hits="2">
<code>  CosmosDbCollection(this.database, this.id,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      {this.partitionKeys,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      IndexingPolicy? indexingPolicy,</code>
</line>
<line>
<code>      GeospatialConfig? geospatialConfig})</code>
</line>
<line hits="3">
<code>      : url = '${database.url}/colls/$id',</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        _indexingPolicy = indexingPolicy,</code>
</line>
<line>
<code>        _geospatialConfig = geospatialConfig;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// The collection's parent [CosmosDbDatabase].</code>
</line>
<line>
<code>  final CosmosDbDatabase database;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// The collection's base [url].</code>
</line>
<line>
<code>  final String url;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Flag indicating whether the collection exists in CosmosDB.</code>
</line>
<line>
<code>  /// `null` if no check has been made yet.</code>
</line>
<line hits="2">
<code>  bool? get exists =&gt; _exists;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>  bool? _exists;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  @override</code>
</line>
<line>
<code>  final String id;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// The collection's list of partition keys; mandatory when creating a new [CosmosDbCollection].</code>
</line>
<line>
<code>  final List&lt;String&gt;? partitionKeys;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// The collection's indexing policy.</code>
</line>
<line hits="0">
<code>  IndexingPolicy? _indexingPolicy;</code>
</line>
<line hits="0">
<code>  IndexingPolicy? get indexingPolicy =&gt; _indexingPolicy;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// The collection's indexing policy.</code>
</line>
<line hits="0">
<code>  GeospatialConfig? _geospatialConfig;</code>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  GeospatialConfig? get geospatialConfig =&gt;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>      _geospatialConfig ?? GeospatialConfig.forPolicy(_indexingPolicy);</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  @override</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>  Map&lt;String, dynamic&gt; toJson() =&gt; {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>        'id': id,</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>        'partitionKey': {</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          "paths": partitionKeys,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        },</code>
</line>
<line hits="2">
<code>        if (_indexingPolicy != null)</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>          'indexingPolicy': _indexingPolicy!.toJson(),</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>        if (geospatialConfig != null)</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>          'geospatialConfig': geospatialConfig!.toJson(),</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      };</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Use this [CosmosDbPermission] when invoking the CosmosDB API. Using</code>
</line>
<line>
<code>  /// [CosmosDbPermission] is a way to avoid disclosing the master key in</code>
</line>
<line>
<code>  /// client applications; to retrieve or create a permission, you should</code>
</line>
<line>
<code>  /// implement some additional API to be used by your client app. This API</code>
</line>
<line>
<code>  /// will protect your master keys. Most methods from [CosmosDbCollection]</code>
</line>
<line>
<code>  /// support an optional [permission] argument, to allow for overriding</code>
</line>
<line>
<code>  /// this collection-wide [permission].</code>
</line>
<line hits="1">
<code>  void usePermission(CosmosDbPermission permission) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    _token = permission.token;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>  }</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Clear the collection-wide permission.</code>
</line>
<line hits="0">
<code>  void clearPermission() {</code>
</line>
<line hits="0">
<code>    _token = null;</code>
</line>
<line>
<code>  }</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Callback to refresh a permission. When the collection-wide</code>
</line>
<line>
<code>  /// [CosmosDbPermission] expires and a CosmosDB API replies with</code>
</line>
<line>
<code>  /// a [ForbiddenException] (HTTP error 403), this callback will</code>
</line>
<line>
<code>  /// be invoked to obtain a new, valid [CosmosDbPermission] that</code>
</line>
<line>
<code>  /// will replace the expired one.</code>
</line>
<line hits="1">
<code>  FutureCallback&lt;CosmosDbPermission?&gt;? onForbidden;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  String? _token;</code>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  Future&lt;CosmosDbPermission?&gt; _refreshPermission() async {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    CosmosDbPermission? permission;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    final callback = onForbidden;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    if (_token != null &amp;&amp; callback != null) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      permission = await callback();</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      if (permission != null) {</code>
</line>
<line hits="2">
<code>        _token = permission.token;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      }</code>
</line>
<line>
<code>    }</code>
</line>
<line hits="1">
<code>    return permission;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Register a [DocumentBuilder] for specified type `T`.</code>
</line>
<line hits="1">
<code>  void registerBuilder&lt;T extends BaseDocument&gt;(DocumentBuilder&lt;T&gt; builder) =&gt;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>      database.registerBuilder&lt;T&gt;(builder);</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Gets information for this [CosmosDbCollection].</code>
</line>
<line hits="2">
<code>  Future&lt;CosmosDbCollection&gt; getInfo({CosmosDbPermission? permission}) async {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>    final coll = await client.get&lt;CosmosDbCollection&gt;(</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>        url,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>        Context(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          type: 'colls',</code>
</line>
<line hits="1">
<code>          token: permission?.token ?? _token,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          throwOnNotFound: true,</code>
</line>
<line hits="4">
<code>          builder: database.collections.fromJson,</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        ));</code>
</line>
<line hits="1">
<code>    return coll!;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Gets information for this [CosmosDbCollection].</code>
</line>
<line hits="2">
<code>  Future&lt;void&gt; setIndexingPolicy(IndexingPolicy indexingPolicy,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      {GeospatialConfig? geospatialConfig,</code>
</line>
<line>
<code>      CosmosDbPermission? permission}) async {</code>
</line>
<line hits="2">
<code>    final prevIndexingPolicy = _indexingPolicy;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    final prevGeospatialConfig = _geospatialConfig;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    _indexingPolicy = indexingPolicy;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    if (geospatialConfig != null) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="0">
<code>      _geospatialConfig = geospatialConfig;</code>
</line>
<line>
<code>    }</code>
</line>
<line>
<code>    try {</code>
</line>
<line hits="3">
<code>      await client.put&lt;CosmosDbCollection&gt;(</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>          url,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          this,</code>
</line>
<line hits="2">
<code>          Context(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>            type: 'colls',</code>
</line>
<line hits="1">
<code>            token: permission?.token ?? _token,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>            builder: database.collections.fromJson,</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          ));</code>
</line>
<line>
<code>    } catch (ex) {</code>
</line>
<line hits="0">
<code>      _indexingPolicy = prevIndexingPolicy;</code>
</line>
<line hits="0">
<code>      _geospatialConfig = prevGeospatialConfig;</code>
</line>
<line hits="0">
<code>      rethrow;</code>
</line>
<line>
<code>    }</code>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Finds the document with [id] in this collection. If the document does not exist,</code>
</line>
<line>
<code>  /// this method returns `null` by default. If `throwOnNotFound` is set to `true`, it</code>
</line>
<line>
<code>  /// will instead throw a [NotFoundException].</code>
</line>
<line hits="2">
<code>  Future&lt;T?&gt; find&lt;T extends BaseDocument&gt;(String id,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          {bool throwOnNotFound = false,</code>
</line>
<line>
<code>          CosmosDbPartition? partition,</code>
</line>
<line>
<code>          CosmosDbPermission? permission}) =&gt;</code>
</line>
<line hits="3">
<code>      client.get&lt;T&gt;(</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>        '$url/docs/$id',</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>        Context(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          type: 'docs',</code>
</line>
<line>
<code>          throwOnNotFound: throwOnNotFound,</code>
</line>
<line hits="1">
<code>          partition: partition ?? CosmosDbPartition(id),</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          token: permission?.token ?? _token,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          onForbidden: _refreshPermission,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        ),</code>
</line>
<line hits="1">
<code>      );</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Lists all documents from this collection.</code>
</line>
<line hits="2">
<code>  Future&lt;Iterable&lt;T&gt;&gt; list&lt;T extends BaseDocument&gt;(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          {CosmosDbPartition? partition, CosmosDbPermission? permission}) =&gt;</code>
</line>
<line hits="3">
<code>      client.getMany&lt;T&gt;(</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>        '$url/docs',</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        'Documents',</code>
</line>
<line hits="2">
<code>        Context(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          type: 'docs',</code>
</line>
<line hits="1">
<code>          resId: url,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          partition: partition,</code>
</line>
<line hits="2">
<code>          token: permission?.token ?? _token,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          onForbidden: _refreshPermission,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        ),</code>
</line>
<line hits="1">
<code>      );</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Loads documents from this collection matching the provided [query].</code>
</line>
<line hits="2">
<code>  Future&lt;Iterable&lt;T&gt;&gt; query&lt;T extends BaseDocument&gt;(Query query,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          {CosmosDbPermission? permission}) =&gt;</code>
</line>
<line hits="3">
<code>      client.query&lt;T&gt;(</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>        '$url/docs',</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        query,</code>
</line>
<line>
<code>        'Documents',</code>
</line>
<line hits="2">
<code>        Context(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          type: 'docs',</code>
</line>
<line hits="1">
<code>          resId: url,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          token: permission?.token ?? _token,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          onForbidden: _refreshPermission,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        ),</code>
</line>
<line hits="1">
<code>      );</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Loads documents from this collection matching the provided [query].</code>
</line>
<line hits="2">
<code>  Future&lt;dynamic&gt; rawQuery(Query query, {CosmosDbPermission? permission}) =&gt;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>      client.rawQuery(</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>        '$url/docs',</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        query,</code>
</line>
<line>
<code>        'Documents',</code>
</line>
<line hits="2">
<code>        Context(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          type: 'docs',</code>
</line>
<line hits="1">
<code>          resId: url,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          token: permission?.token ?? _token,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          onForbidden: _refreshPermission,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        ),</code>
</line>
<line hits="1">
<code>      );</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Adds a new [document] to this collection.</code>
</line>
<line hits="2">
<code>  Future&lt;T&gt; add&lt;T extends BaseDocument&gt;(T document,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          {CosmosDbPartition? partition, CosmosDbPermission? permission}) =&gt;</code>
</line>
<line hits="3">
<code>      client.post(</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>        '$url/docs',</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>        document,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>        Context(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          type: 'docs',</code>
</line>
<line hits="1">
<code>          resId: url,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>          partition: partition ?? CosmosDbPartition(document.id),</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          token: permission?.token ?? _token,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          onForbidden: _refreshPermission,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        ),</code>
</line>
<line hits="1">
<code>      );</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Adds or updates (replaces) a [document] in this collection.</code>
</line>
<line hits="2">
<code>  Future&lt;T&gt; upsert&lt;T extends BaseDocument&gt;(T document,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          {CosmosDbPartition? partition, CosmosDbPermission? permission}) =&gt;</code>
</line>
<line hits="3">
<code>      client.post(</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>        '$url/docs',</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>        document,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>        Context(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          type: 'docs',</code>
</line>
<line hits="1">
<code>          resId: url,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          headers: {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>            'x-ms-documentdb-is-upsert': 'true',</code>
</line>
<line>
<code>          },</code>
</line>
<line hits="3">
<code>          partition: partition ?? CosmosDbPartition(document.id),</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          token: permission?.token ?? _token,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          onForbidden: _refreshPermission,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        ),</code>
</line>
<line hits="1">
<code>      );</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Updates (replaces) a [document] in this collection. The [document] must be a</code>
</line>
<line>
<code>  /// [BaseDocumentWithEtag] and its [BaseDocumentWithEtag.etag] must be known.</code>
</line>
<line hits="1">
<code>  Future&lt;T&gt; replace&lt;T extends BaseDocumentWithEtag&gt;(T document,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          {CosmosDbPartition? partition, CosmosDbPermission? permission}) =&gt;</code>
</line>
<line hits="3">
<code>      client.put(</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>        '$url/docs/${document.id}',</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        document,</code>
</line>
<line hits="2">
<code>        Context(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          type: 'docs',</code>
</line>
<line hits="2">
<code>          headers: {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>            'if-match': document.etag,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          },</code>
</line>
<line hits="2">
<code>          partition: partition ?? CosmosDbPartition(document.id),</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>          token: permission?.token ?? _token,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          onForbidden: _refreshPermission,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        ),</code>
</line>
<line>
<code>      );</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Deletes the document with [id] from this collection. If the document does not</code>
</line>
<line>
<code>  /// exist, this method returns `true` by default. If [throwOnNotFound] is set to</code>
</line>
<line>
<code>  /// `true`, it will instead throw a [NotFoundException].</code>
</line>
<line hits="2">
<code>  Future&lt;bool&gt; delete(String id,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          {bool throwOnNotFound = false,</code>
</line>
<line>
<code>          CosmosDbPartition? partition,</code>
</line>
<line>
<code>          CosmosDbPermission? permission}) =&gt;</code>
</line>
<line hits="3">
<code>      client.delete(</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>        '$url/docs/$id',</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>        Context(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          type: 'docs',</code>
</line>
<line>
<code>          throwOnNotFound: throwOnNotFound,</code>
</line>
<line hits="1">
<code>          partition: partition ?? CosmosDbPartition(id),</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          token: permission?.token ?? _token,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          onForbidden: _refreshPermission,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        ),</code>
</line>
<line hits="1">
<code>      );</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
<line>
<code/>
</line>
<line>
<code>// internal use</code>
</line>
<line>
<code>extension CollectionExt on CosmosDbCollection {</code>
</line>
<line hits="3">
<code>  void setExists(bool exists) =&gt; _exists = exists;</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="4">
<code>  Client get client =&gt; database.client;</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
</lines>
<config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
<base href="../"/>
<base href="../"/>
</coverage>
