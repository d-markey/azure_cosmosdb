<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2022-12-04" filename="_client.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.9807692" lines-covered="102" lines-valid="104" package="/src/client" testname="lcov.info" version="1.5">
<lines>
<line>
<code>import 'dart:async';</code>
</line>
<line>
<code>import 'dart:convert';</code>
</line>
<line>
<code/>
</line>
<line>
<code>import 'package:crypto/crypto.dart';</code>
</line>
<line>
<code>import 'package:http/http.dart' as http;</code>
</line>
<line>
<code>import 'package:retry/retry.dart';</code>
</line>
<line>
<code/>
</line>
<line>
<code>import '../_internal/_authorization.dart';</code>
</line>
<line>
<code>import '../_internal/_http_status_codes.dart';</code>
</line>
<line>
<code>import '../base_document.dart';</code>
</line>
<line>
<code>import '../cosmos_db_exceptions.dart';</code>
</line>
<line>
<code>import '../queries/paging.dart';</code>
</line>
<line>
<code>import '../queries/query.dart';</code>
</line>
<line>
<code>import '_context.dart';</code>
</line>
<line>
<code>import '_retry_if_web.dart' if (dart.library.io) '_retry_if_vm.dart';</code>
</line>
<line>
<code/>
</line>
<line>
<code>typedef _DocumentBuilder = DocumentBuilder&lt;BaseDocument&gt;;</code>
</line>
<line>
<code/>
</line>
<line>
<code>class Client {</code>
</line>
<line hits="2">
<code>  Client(this._url, {String? masterKey, http.Client? httpClient})</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      : _baseHttpClient = httpClient ?? http.Client() {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>    _http = _baseHttpClient;</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    if (masterKey != null) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>      _key = Hmac(sha256, base64Decode(masterKey));</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    } else {</code>
</line>
<line hits="1">
<code>      _key = null;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    }</code>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  final String _url;</code>
</line>
<line>
<code>  final http.Client _baseHttpClient;</code>
</line>
<line>
<code>  final RetryOptions _retry = RetryOptions();</code>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  late final Hmac? _key;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  late final http.Client _http;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  final _builders = &lt;Type, _DocumentBuilder&gt;{};</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="3">
<code>  http.Client get httpClient =&gt; _baseHttpClient;</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  void registerBuilder&lt;T extends BaseDocument&gt;(DocumentBuilder&lt;T&gt; builder) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>    _builders[T] = builder;</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  DocumentBuilder&lt;T&gt; _getBuilder&lt;T extends BaseDocument&gt;(Context context) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>    final builder = context.builder ?? _builders[T];</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    if (builder == null) throw UnknownDocumentTypeException(T);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    return (data) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      try {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>        return builder(data) as T;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      } catch (ex) {</code>
</line>
<line hits="0">
<code>        throw BadResponseException(ex.toString());</code>
</line>
<line>
<code>      }</code>
</line>
<line hits="1">
<code>    };</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  T? _build&lt;T extends BaseDocument&gt;(Context context, Map? item) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    final builder = _getBuilder&lt;T&gt;(context);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>    return (item == null || item.isEmpty) ? null : builder(item);</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  Iterable&lt;T&gt; _buildMany&lt;T extends BaseDocument&gt;(Context context, List? items) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    final builder = _getBuilder&lt;T&gt;(context);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>    return (items ?? []).map((item) =&gt; builder(item));</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  Future&lt;http.StreamedResponse&gt; _sendWithAuth(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    String method,</code>
</line>
<line>
<code>    String path,</code>
</line>
<line>
<code>    BaseDocument? body,</code>
</line>
<line>
<code>    Context context,</code>
</line>
<line>
<code>    Authorization authorization,</code>
</line>
<line>
<code>  ) {</code>
</line>
<line hits="5">
<code>    final request = http.Request(method, Uri.parse(_url + path));</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>    if (body != null) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      request.body = jsonEncode(body);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>      request.headers['content-type'] = 'application/json';</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    }</code>
</line>
<line>
<code/>
</line>
<line hits="4">
<code>    request.headers.addAll(context.getHeaders());</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="4">
<code>    request.headers['authorization'] = authorization.token;</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>    request.headers['x-ms-date'] = authorization.date;</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>    request.headers['x-ms-version'] = '2018-12-31';</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="3">
<code>    return _retry.retry(</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="6">
<code>      () =&gt; _http.send(request).timeout(Duration(seconds: 5)),</code>
<hit count="6" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>      retryIf: (e) =&gt; retryIf(_http, e),</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    );</code>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  Future&lt;dynamic&gt; _send(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    String method,</code>
</line>
<line>
<code>    String path,</code>
</line>
<line>
<code>    BaseDocument? body,</code>
</line>
<line>
<code>    Context context,</code>
</line>
<line>
<code>  ) async {</code>
</line>
<line hits="2">
<code>    String resId = context.resId ?? path;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>    var auth = (context.token != null)</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>        ? Authorization.fromToken(context.token!)</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>        : Authorization.fromKey(</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>            _key, method.toLowerCase(), context.type, resId);</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>    var result = await _sendWithAuth(method, path, body, context, auth);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="3">
<code>    if (result.statusCode == HttpStatusCode.forbidden) {</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      // try to get a new permission from the onForbidden callback</code>
</line>
<line hits="3">
<code>      final permission = await context.onForbidden?.call();</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      final token = permission?.token;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      if (token != null) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        // try again with this permission</code>
</line>
<line hits="2">
<code>        auth = Authorization.fromToken(token);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>        result = await _sendWithAuth(method, path, body, context, auth);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      }</code>
</line>
<line>
<code>    }</code>
</line>
<line>
<code/>
</line>
<line hits="3">
<code>    final contentType = result.headers['content-type'];</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    if (contentType != 'application/json') {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="0">
<code>      throw BadResponseException('Unsupported content-type: $contentType');</code>
</line>
<line>
<code>    }</code>
</line>
<line hits="3">
<code>    final response = await result.stream.bytesToString();</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>    dynamic data = response.isEmpty ? {} : jsonDecode(response);</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>    if (!HttpStatusCode.success(result.statusCode)) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>      final ex = CosmosDbException(result.statusCode, data['message']);</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      if (ex is! NotFoundException || context.throwOnNotFound) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>        throw ex;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      }</code>
</line>
<line>
<code>      // set data to null when ignoring the error</code>
</line>
<line>
<code>      data = null;</code>
</line>
<line>
<code>    }</code>
</line>
<line>
<code/>
</line>
<line hits="5">
<code>    context.paging?.setContinuation(result.headers['x-ms-continuation'] ?? '');</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    return data;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  Future&lt;dynamic&gt; getJson(String path, Context context) =&gt;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>      _send('GET', path, null, context).onError&lt;ContextualizedException&gt;(</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>          (error, stackTrace) =&gt; throw error.withContext('GET', path));</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  Future&lt;T?&gt; get&lt;T extends BaseDocument&gt;(String path, Context context) =&gt;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      _send('GET', path, null, context)</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>          .then((data) =&gt; _build&lt;T&gt;(context, data))</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          .onError&lt;ContextualizedException&gt;(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>              (error, stackTrace) =&gt; throw error.withContext('GET', path));</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  Future&lt;Iterable&lt;T&gt;&gt; getMany&lt;T extends BaseDocument&gt;(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          String path, String resultSet, Context context) =&gt;</code>
</line>
<line hits="2">
<code>      _send('GET', path, null, context)</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="5">
<code>          .then((result) =&gt; _buildMany&lt;T&gt;(context, result![resultSet]))</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          .onError&lt;ContextualizedException&gt;(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>              (error, stackTrace) =&gt; throw error.withContext('GET', path));</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  Future&lt;T&gt; post&lt;T extends BaseDocument&gt;(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          String path, BaseDocument doc, Context context) =&gt;</code>
</line>
<line hits="2">
<code>      _send('POST', path, doc, context)</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>          .then((data) =&gt; _build&lt;T&gt;(context, data)!)</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          .onError&lt;ContextualizedException&gt;(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>              (error, stackTrace) =&gt; throw error.withContext('POST', path));</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  Future&lt;Iterable&lt;T&gt;&gt; query&lt;T extends BaseDocument&gt;(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          String path, Query query, String resultSet, Context context) =&gt;</code>
</line>
<line hits="2">
<code>      _send(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        'POST',</code>
</line>
<line>
<code>        path,</code>
</line>
<line>
<code>        query,</code>
</line>
<line hits="1">
<code>        context.copyWith(</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          query: query,</code>
</line>
<line hits="2">
<code>          headers: {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>            'content-type': 'application/query+json',</code>
</line>
<line>
<code>            'x-ms-documentdb-isquery': 'true',</code>
</line>
<line>
<code>          },</code>
</line>
<line>
<code>        ),</code>
</line>
<line>
<code>      )</code>
</line>
<line hits="5">
<code>          .then((result) =&gt; _buildMany&lt;T&gt;(context, result![resultSet]))</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          .onError&lt;ContextualizedException&gt;(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>              (error, stackTrace) =&gt; throw error.withContext('POST', path));</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  Future&lt;T&gt; put&lt;T extends BaseDocument&gt;(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          String path, BaseDocument doc, Context context) =&gt;</code>
</line>
<line hits="2">
<code>      _send('PUT', path, doc, context)</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>          .then((data) =&gt; _build&lt;T&gt;(context, data)!)</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          .onError&lt;ContextualizedException&gt;(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>              (error, stackTrace) =&gt; throw error.withContext('PUT', path));</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  Future&lt;bool&gt; delete(String path, Context context) =&gt;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      _send('DELETE', path, null, context)</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>          .then((result) =&gt; true)</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          .onError&lt;ContextualizedException&gt;(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>              (error, stackTrace) =&gt; throw error.withContext('DELETE', path));</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
</lines>
<config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
<base href="../../"/>
<base href="../../"/>
</coverage>
