<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2025-01-06" filename="debug_http_client.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.7846154" lines-covered="51" lines-valid="65" package="src/client" testname="lcov.info" version="1.6">
<lines>
<line number="1">
<code>import 'dart:async';</code>
</line>
<line number="2">
<code>import 'dart:developer' as dev;</code>
</line>
<line number="3">
<code/>
</line>
<line number="4">
<code>import 'package:azure_cosmosdb/src/_internal/_mime_type.dart';</code>
</line>
<line number="5">
<code>import 'package:http/http.dart' as http;</code>
</line>
<line number="6">
<code/>
</line>
<line number="7">
<code>import '../_internal/_http_header.dart';</code>
</line>
<line number="8">
<code>import '_debug_http_overrides_web.dart'</code>
</line>
<line number="9">
<code>    if (dart.library.io) '_debug_http_overrides_vm.dart';</code>
</line>
<line number="10">
<code>import 'http_status_codes.dart';</code>
</line>
<line number="11">
<code/>
</line>
<line number="12">
<code>/// Debug HTTP client that can be used to trace request/responses. This client also</code>
</line>
<line number="13">
<code>/// installs a global HTTP override object to accept self-signed certificates.</code>
</line>
<line number="14">
<code>/// DO NOT USE IN PRODUCTION.</code>
</line>
<line number="15">
<code>class DebugHttpClient extends http.BaseClient {</code>
</line>
<line hits="1" number="16">
<code>  DebugHttpClient({this.trace = false}) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="17">
<code>    allowSelfSignedCertificates();</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2" number="18">
<code>    _http = http.Client();</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line number="19">
<code>  }</code>
</line>
<line number="20">
<code/>
</line>
<line number="21">
<code>  /// Enable/disable request/response tracing.</code>
</line>
<line number="22">
<code>  bool trace;</code>
</line>
<line number="23">
<code/>
</line>
<line number="24">
<code>  /// Enable/disable headers tracing.</code>
</line>
<line number="25">
<code>  bool traceHeaders = false;</code>
</line>
<line number="26">
<code/>
</line>
<line number="27">
<code>  /// Enable/disable body tracing.</code>
</line>
<line number="28">
<code>  bool traceBody = false;</code>
</line>
<line number="29">
<code/>
</line>
<line number="30">
<code>  /// Enable/disable forced forbidden (status code 403) response.</code>
</line>
<line number="31">
<code>  bool forceForbidden = false;</code>
</line>
<line number="32">
<code/>
</line>
<line number="33">
<code>  /// Enable/disable forced throttled delay.</code>
</line>
<line number="34">
<code>  Duration? forceThrottleDelay;</code>
</line>
<line number="35">
<code/>
</line>
<line number="36">
<code>  /// Enable/disable forced timeout response. When set, the next request will</code>
</line>
<line number="37">
<code>  /// throw the exception and reset [forceException].</code>
</line>
<line number="38">
<code>  Object? forceException;</code>
</line>
<line number="39">
<code/>
</line>
<line number="40">
<code>  late final http.Client _http;</code>
</line>
<line number="41">
<code/>
</line>
<line number="42">
<code>  /// Log function based on `dart:developer`'s [dev.log].</code>
</line>
<line hits="0" number="43">
<code>  static void defaultLog(Object? object) =&gt; dev.log(object.toString());</code>
</line>
<line number="44">
<code/>
</line>
<line number="45">
<code>  /// Log function ([defaultLog] by default).</code>
</line>
<line number="46">
<code>  void Function(Object? object) log = defaultLog;</code>
</line>
<line number="47">
<code/>
</line>
<line hits="0" number="48">
<code>  @override</code>
</line>
<line hits="0" number="49">
<code>  void close() =&gt; _http.close();</code>
</line>
<line number="50">
<code/>
</line>
<line hits="1" number="51">
<code>  Future&lt;http.BaseRequest&gt; _logRequest(</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="52">
<code>      String ts, http.BaseRequest request) async {</code>
</line>
<line hits="2" number="53">
<code>    log('&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;');</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="5" number="54">
<code>    log('[$ts] --&gt; ${request.method} ${request.url}');</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line number="55">
<code/>
</line>
<line hits="1" number="56">
<code>    if (traceHeaders) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3" number="57">
<code>      for (var h in request.headers.entries) {</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="5" number="58">
<code>        log('[$ts] --&gt; ${h.key} = ${h.value}');</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line number="59">
<code>      }</code>
</line>
<line number="60">
<code>    }</code>
</line>
<line number="61">
<code/>
</line>
<line hits="1" number="62">
<code>    if (traceBody) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="63">
<code>      if (request is http.Request) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="4" number="64">
<code>        log('[$ts] --&gt; body = ${request.body}');</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="0" number="65">
<code>      } else if (request is http.StreamedRequest) {</code>
</line>
<line number="66">
<code>        // get the request bytes for logging</code>
</line>
<line hits="0" number="67">
<code>        final bodyBytes = await request.finalize().toBytes();</code>
</line>
<line hits="0" number="68">
<code>        final body = String.fromCharCodes(bodyBytes);</code>
</line>
<line hits="0" number="69">
<code>        log('[$ts] --&gt; body = $body');</code>
</line>
<line number="70">
<code>        // rebuild the request for sending</code>
</line>
<line hits="0" number="71">
<code>        var req = http.Request(request.method, request.url);</code>
</line>
<line hits="0" number="72">
<code>        req.bodyBytes = bodyBytes;</code>
</line>
<line hits="0" number="73">
<code>        req.headers.addAll(request.headers);</code>
</line>
<line hits="0" number="74">
<code>        req.followRedirects = request.followRedirects;</code>
</line>
<line hits="0" number="75">
<code>        req.maxRedirects = request.maxRedirects;</code>
</line>
<line hits="0" number="76">
<code>        req.persistentConnection = request.persistentConnection;</code>
</line>
<line number="77">
<code>        request = req;</code>
</line>
<line number="78">
<code>      } else {</code>
</line>
<line hits="0" number="79">
<code>        log('[$ts] --&gt; no body in $request');</code>
</line>
<line number="80">
<code>      }</code>
</line>
<line number="81">
<code>    }</code>
</line>
<line number="82">
<code>    return request;</code>
</line>
<line number="83">
<code>  }</code>
</line>
<line number="84">
<code/>
</line>
<line hits="1" number="85">
<code>  Future&lt;http.StreamedResponse&gt; _logResponse(</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="86">
<code>      String ts, http.StreamedResponse response) async {</code>
</line>
<line hits="5" number="87">
<code>    log('[$ts] &lt;-- COSMOS DB Status = ${response.statusCode} ${response.reasonPhrase}');</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="88">
<code>    if (traceHeaders) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3" number="89">
<code>      for (var h in response.headers.entries) {</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="5" number="90">
<code>        log('[$ts] &lt;-- ${h.key} = ${h.value}');</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line number="91">
<code>      }</code>
</line>
<line number="92">
<code>    }</code>
</line>
<line hits="1" number="93">
<code>    if (traceBody) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="94">
<code>      // get the response bytes for logging</code>
</line>
<line hits="1" number="95">
<code>      final resp = await http.Response.fromStream(response);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="5" number="96">
<code>      log('[$ts] &lt;-- COSMOS DB ${resp.statusCode} Payload = ${resp.body}');</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line number="97">
<code>      // rebuild the response</code>
</line>
<line hits="1" number="98">
<code>      response = http.StreamedResponse(</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3" number="99">
<code>        Stream.fromIterable([resp.bodyBytes]),</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="100">
<code>        resp.statusCode,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="101">
<code>        contentLength: resp.contentLength,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="102">
<code>        headers: resp.headers,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="103">
<code>        reasonPhrase: resp.reasonPhrase,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="104">
<code>        isRedirect: resp.isRedirect,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="105">
<code>        request: response.request,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="106">
<code>      );</code>
</line>
<line number="107">
<code>    }</code>
</line>
<line hits="2" number="108">
<code>    log('&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;');</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line number="109">
<code>    return response;</code>
</line>
<line number="110">
<code>  }</code>
</line>
<line number="111">
<code/>
</line>
<line hits="1" number="112">
<code>  Future&lt;void&gt; _logException(String ts, dynamic exception) async {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3" number="113">
<code>    log('[$ts] &lt;-- EXCEPTION CAUGHT: $exception');</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2" number="114">
<code>    log('&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;');</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line number="115">
<code>  }</code>
</line>
<line number="116">
<code/>
</line>
<line hits="1" number="117">
<code>  @override</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="118">
<code>  Future&lt;http.StreamedResponse&gt; send(http.BaseRequest request) async {</code>
</line>
<line hits="3" number="119">
<code>    String ts = DateTime.now().toUtc().toIso8601String();</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line number="120">
<code/>
</line>
<line hits="2" number="121">
<code>    request = trace ? await _logRequest(ts, request) : request;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line number="122">
<code/>
</line>
<line number="123">
<code>    http.StreamedResponse response;</code>
</line>
<line number="124">
<code/>
</line>
<line number="125">
<code>    try {</code>
</line>
<line hits="1" number="126">
<code>      final ex = forceException;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="127">
<code>      if (ex != null) {</code>
</line>
<line hits="1" number="128">
<code>        forceException = null;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="129">
<code>        throw ex;</code>
</line>
<line number="130">
<code>      }</code>
</line>
<line hits="1" number="131">
<code>      if (forceThrottleDelay != null) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2" number="132">
<code>        final delay = forceThrottleDelay!.inMilliseconds;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="133">
<code>        forceThrottleDelay = null;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="134">
<code>        response = http.StreamedResponse(</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2" number="135">
<code>          Stream&lt;List&lt;int&gt;&gt;.fromIterable([]),</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line number="136">
<code>          HttpStatusCode.tooManyRequests,</code>
</line>
<line number="137">
<code>          reasonPhrase: 'Forced Throttle',</code>
</line>
<line hits="2" number="138">
<code>          headers: {HttpHeader.msRetryAfterMs: delay.toString()},</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line number="139">
<code>        );</code>
</line>
<line hits="1" number="140">
<code>      } else if (forceForbidden) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="141">
<code>        response = http.StreamedResponse(</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2" number="142">
<code>          Stream&lt;List&lt;int&gt;&gt;.fromIterable([]),</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line number="143">
<code>          HttpStatusCode.forbidden,</code>
</line>
<line number="144">
<code>          reasonPhrase: 'Forced Forbidden',</code>
</line>
<line hits="1" number="145">
<code>          headers: {HttpHeader.contentType: MimeType.json},</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="146">
<code>        );</code>
</line>
<line number="147">
<code>      } else {</code>
</line>
<line hits="2" number="148">
<code>        response = await _http.send(request);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line number="149">
<code>      }</code>
</line>
<line hits="2" number="150">
<code>      response = trace ? await _logResponse(ts, response) : response;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line number="151">
<code>    } catch (ex) {</code>
</line>
<line hits="1" number="152">
<code>      if (trace) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1" number="153">
<code>        _logException(ts, ex);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line number="154">
<code>      }</code>
</line>
<line number="155">
<code>      rethrow;</code>
</line>
<line number="156">
<code>    }</code>
</line>
<line number="157">
<code/>
</line>
<line number="158">
<code>    return response;</code>
</line>
<line number="159">
<code>  }</code>
</line>
<line number="160">
<code>}</code>
</line>
</lines>
<config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false" show-details="false"/>
<base href="../../"/>
<base href="../../"/>
</coverage>
