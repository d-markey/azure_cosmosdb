<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../../../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2023-03-04" filename="cosmos_db_server.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.96428573" lines-covered="27" lines-valid="28" package="/a/azure_cosmosdb/azure_cosmosdb/lib/src" testname="lcov.info" version="1.5">
<lines>
<line>
<code>import 'package:http/http.dart' as http;</code>
</line>
<line>
<code>import 'package:meta/meta.dart';</code>
</line>
<line>
<code>import 'package:retry/retry.dart';</code>
</line>
<line>
<code/>
</line>
<line>
<code>import 'client/_client.dart';</code>
</line>
<line>
<code>import 'client/debug_http_client.dart';</code>
</line>
<line>
<code>import 'client/features.dart';</code>
</line>
<line>
<code>import 'cosmos_db_databases.dart';</code>
</line>
<line>
<code/>
</line>
<line>
<code>typedef FutureCallback&lt;T&gt; = Future&lt;T&gt; Function();</code>
</line>
<line>
<code/>
</line>
<line>
<code>/// Class representing a CosmosDB instance.</code>
</line>
<line>
<code>class CosmosDbServer {</code>
</line>
<line>
<code>  /// Builds a new Cosmos DB [CosmosDbServer] with the provided [urlOrAccount],</code>
</line>
<line>
<code>  /// [masterKey] and [httpClient]. [urlOrAccount] can be a full URL (eg.</code>
</line>
<line>
<code>  /// `https://localhost:8081/`) or the Azure CosmosDB account name, in which case</code>
</line>
<line>
<code>  /// the url will be constructed as `https://${urlOrAccount}.documents.azure.com/`.</code>
</line>
<line>
<code>  /// Passing the [masterKey] is discouraged in client apps to prevent from theft;</code>
</line>
<line>
<code>  /// instead, a proxy should be implemented in order to protect the master key.</code>
</line>
<line hits="1">
<code>  CosmosDbServer(String urlOrAccount,</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      {String? masterKey,</code>
</line>
<line>
<code>      http.Client? httpClient,</code>
</line>
<line>
<code>      RetryOptions? retryOptions,</code>
</line>
<line>
<code>      bool multipleWriteLocations = false,</code>
</line>
<line>
<code>      bool preview = false})</code>
</line>
<line hits="2">
<code>      : _client = Client(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          _buildUrl(urlOrAccount),</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          masterKey: masterKey,</code>
</line>
<line>
<code>          httpClient: httpClient,</code>
</line>
<line>
<code>          retryOptions: retryOptions,</code>
</line>
<line>
<code>          multipleWriteLocations: multipleWriteLocations,</code>
</line>
<line>
<code>          version: preview ? previewApiVersion : currentApiVersion,</code>
</line>
<line>
<code>        );</code>
</line>
<line>
<code/>
</line>
<line>
<code>  final Client _client;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Provides access to databases in this [CosmosDbServer].</code>
</line>
<line hits="3">
<code>  late final CosmosDbDatabases databases = CosmosDbDatabases(this);</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="0">
<code>  String get version =&gt; _client.version;</code>
</line>
<line>
<code/>
</line>
<line hits="4">
<code>  Features get features =&gt; _client.features;</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="3">
<code>  static String _buildUrl(String urlOrAccount) =&gt; !urlOrAccount.contains('://')</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      ? 'https://$urlOrAccount.documents.azure.com/'</code>
</line>
<line hits="2">
<code>      : !urlOrAccount.endsWith('/')</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          ? '$urlOrAccount/'</code>
</line>
<line hits="2">
<code>          : urlOrAccount;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
<line>
<code/>
</line>
<line>
<code>// debug use</code>
</line>
<line>
<code>extension CosmosDbServerDbgExt on CosmosDbServer {</code>
</line>
<line>
<code>  /// The underlying HTTP client used to communicate with the Cosmos DB server.</code>
</line>
<line hits="1">
<code>  DebugHttpClient? get dbgHttpClient {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>    final client = _client.httpClient;</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    return (client is DebugHttpClient) ? client : null;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>  }</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Activate a logger. Typically used with a `try`/`finally` block, e.g.:</code>
</line>
<line>
<code>  /// ```dart</code>
</line>
<line>
<code>  /// server.useLogger(print);</code>
</line>
<line>
<code>  /// try {</code>
</line>
<line>
<code>  ///   // do something eg. create a container, add a document, execute a query...</code>
</line>
<line>
<code>  ///   // the request to CosmosDB will be logged</code>
</line>
<line>
<code>  /// } finally {</code>
</line>
<line>
<code>  ///   server.resetLogger();</code>
</line>
<line>
<code>  /// }</code>
</line>
<line>
<code>  /// ```</code>
</line>
<line hits="2">
<code>  void useLogger(void Function(Object?) logger,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      {bool withBody = false, bool withHeader = false}) {</code>
</line>
<line hits="1">
<code>    final dbgClient = dbgHttpClient;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    if (dbgClient != null) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      dbgClient.log = logger;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      dbgClient.trace = true;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      dbgClient.traceBody = withBody;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      dbgClient.traceHeaders = withHeader;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    }</code>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Reset the logger.</code>
</line>
<line hits="1">
<code>  void resetLogger() {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    final dbgClient = dbgHttpClient;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    if (dbgClient != null) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      dbgClient.log = DebugHttpClient.defaultLog;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      dbgClient.trace = false;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      dbgClient.traceBody = false;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      dbgClient.traceHeaders = false;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    }</code>
</line>
<line>
<code>  }</code>
</line>
<line>
<code>}</code>
</line>
<line>
<code/>
</line>
<line>
<code>// internal use</code>
</line>
<line>
<code>@internal</code>
</line>
<line>
<code>extension CosmosDbServerInternalExt on CosmosDbServer {</code>
</line>
<line>
<code>  /// The CosmosDB client used for this instance.</code>
</line>
<line hits="3">
<code>  Client get client =&gt; _client;</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
</lines>
<config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
<base href="../../../../../"/>
<base href="../../../../../"/>
</coverage>
