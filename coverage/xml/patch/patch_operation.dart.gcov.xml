<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2024-01-21" filename="patch_operation.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="1.0" lines-covered="18" lines-valid="18" package="/patch" testname="lcov.info" version="1.5">
<lines>
<line>
<code>import 'patch_operation_type.dart';</code>
</line>
<line>
<code/>
</line>
<line>
<code>/// Class representing a patch operation.</code>
</line>
<line>
<code>class PatchOperation {</code>
</line>
<line hits="1">
<code>  PatchOperation._(this.type, this.path, this.value);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// The operation's [type].</code>
</line>
<line>
<code>  final PatchOperationType type;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// The target property [path].</code>
</line>
<line>
<code>  final String path;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// The [value] used to apply the operation..</code>
</line>
<line>
<code>  final dynamic value;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Creates a new "[PatchOperationType.add]" patch operation.</code>
</line>
<line hits="1">
<code>  PatchOperation.add(String path, dynamic value)</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      : this._(PatchOperationType.add, path, value);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Creates a new "[PatchOperationType.set]" patch operation.</code>
</line>
<line hits="1">
<code>  PatchOperation.set(String path, dynamic value)</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      : this._(PatchOperationType.set, path, value);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Creates a new "[PatchOperationType.replace]" patch operation.</code>
</line>
<line hits="1">
<code>  PatchOperation.replace(String path, dynamic value)</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      : this._(PatchOperationType.replace, path, value);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Creates a new "[PatchOperationType.incr]" patch operation.</code>
</line>
<line hits="1">
<code>  PatchOperation.incr(String path, num value)</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      : this._(PatchOperationType.incr, path, value);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Creates a new "`PatchOperationType.decr`" patch operation. This is implemented</code>
</line>
<line>
<code>  /// as a "[PatchOperationType.incr]" operation with the opposite [value].</code>
</line>
<line hits="1">
<code>  PatchOperation.decr(String path, num value)</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      : this._(PatchOperationType.incr, path, -value);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Creates a new "[PatchOperationType.remove]" patch operation.</code>
</line>
<line hits="1">
<code>  PatchOperation.remove(String path)</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      : this._(PatchOperationType.remove, path, null);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Serializes this instance to a JSON object.</code>
</line>
<line hits="3">
<code>  Map&lt;String, dynamic&gt; toJson() =&gt; {</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>        'op': type.name,</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>        'path': path,</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="5">
<code>        if (type != PatchOperationType.remove) 'value': value,</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      };</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
</lines>
<config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
<base href="../"/>
<base href="../"/>
</coverage>
