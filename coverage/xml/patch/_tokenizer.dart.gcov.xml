<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2023-10-12" filename="_tokenizer.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="1.0" lines-covered="108" lines-valid="108" package="/patch" testname="lcov.info" version="1.5">
<lines>
<line>
<code>import 'dart:convert';</code>
</line>
<line>
<code/>
</line>
<line>
<code>import '../cosmos_db_exceptions.dart';</code>
</line>
<line>
<code>import '_token.dart';</code>
</line>
<line>
<code/>
</line>
<line>
<code>class Tokenizer {</code>
</line>
<line hits="2">
<code>  Tokenizer(this.condition)</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="6">
<code>      : _chars = condition.runes.map((r) =&gt; String.fromCharCode(r)).toList();</code>
<hit count="6" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  final String condition;</code>
</line>
<line>
<code>  final List&lt;String&gt; _chars;</code>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  String operator [](int idx) =&gt;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="7">
<code>      (0 &lt;= idx &amp;&amp; idx &lt; _chars.length) ? _chars[idx] : '\u0000';</code>
<hit count="7" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="3">
<code>  static final _whitespaces =</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      ' \t\n\v\f\r\u0085\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u2028\u2029\u202F\u205F\u3000'</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          .split('')</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>          .toSet();</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="5">
<code>  static final _quotes = '\'"'.split('').toSet();</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line hits="5">
<code>  static final _operators = '+-*/%&amp;|^.?!=&lt;&gt;'.split('').toSet();</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line hits="5">
<code>  static final _separators = '()[]{},:'.split('').toSet();</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="5">
<code>  static final _signs = '+-'.split('').toSet();</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line hits="5">
<code>  static final _digits = '0123456789'.split('').toSet();</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line hits="5">
<code>  static final _expMarks = 'Ee'.split('').toSet();</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line hits="5">
<code>  static final _hexMarks = 'Xx'.split('').toSet();</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line hits="5">
<code>  static final _hexDigits = '0123456789ABCDEFabcdef'.split('').toSet();</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="4">
<code>  static final _delimitors = {</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    ..._whitespaces,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    ..._quotes,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    ..._operators,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    ..._separators,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>  };</code>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  int _skipHexDigits(int pos) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="7">
<code>    while (pos &lt; _chars.length &amp;&amp; _hexDigits.contains(this[pos])) {</code>
<hit count="7" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      pos++;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    }</code>
</line>
<line hits="1">
<code>    return pos;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  int _skipDigits(int pos) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="7">
<code>    while (pos &lt; _chars.length &amp;&amp; _digits.contains(this[pos])) {</code>
<hit count="7" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      pos++;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    }</code>
</line>
<line hits="1">
<code>    return pos;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  int _skipNumber(int pos) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    var p = pos;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="7">
<code>    if (this[p] == '0' &amp;&amp; _hexMarks.contains(this[p + 1])) {</code>
<hit count="7" name="&lt;unnamed&gt;"/>
</line>
<line hits="5">
<code>      if (!_hexDigits.contains(this[p + 2])) {</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>        throw InvalidTokenException('Malformed hexadecimal number (pos=$pos).');</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      }</code>
</line>
<line hits="3">
<code>      p = _skipHexDigits(p + 3);</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    } else {</code>
</line>
<line hits="2">
<code>      p = _skipDigits(p);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>      if (this[p] == '.') {</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>        var idx = _skipDigits(p + 1);</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>        if (idx == p + 1) {</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>          // end of number</code>
</line>
<line hits="1">
<code>          return p;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        }</code>
</line>
<line>
<code>        p = idx;</code>
</line>
<line>
<code>      }</code>
</line>
<line hits="4">
<code>      if (_expMarks.contains(this[p])) {</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="6">
<code>        var start = p + (_signs.contains(this[p + 1]) ? 2 : 1);</code>
<hit count="6" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>        var idx = _skipDigits(start);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>        if (idx == start) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>          throw InvalidTokenException('Malformed exponent (pos=$pos).');</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        }</code>
</line>
<line>
<code>        p = idx;</code>
</line>
<line>
<code>      }</code>
</line>
<line>
<code>    }</code>
</line>
<line hits="1">
<code>    return p;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  int _skipString(int pos) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    var quote = this[pos];</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    var p = pos + 1;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>    while (p &lt; _chars.length) {</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      var ch = this[p];</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      if (ch == '\\') {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>        p += 2;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      } else if (ch == quote) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>        p++;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        // end of string</code>
</line>
<line hits="1">
<code>        return p;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      } else {</code>
</line>
<line hits="1">
<code>        p++;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      }</code>
</line>
<line>
<code>    }</code>
</line>
<line hits="3">
<code>    throw InvalidTokenException('Malformed string (pos=$pos).');</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  int _skipOperator(int pos) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="7">
<code>    if (this[pos] == '&lt;' &amp;&amp; this[pos + 1] == '=') return pos + 2;</code>
<hit count="7" name="&lt;unnamed&gt;"/>
</line>
<line hits="7">
<code>    if (this[pos] == '&gt;' &amp;&amp; this[pos + 1] == '=') return pos + 2;</code>
<hit count="7" name="&lt;unnamed&gt;"/>
</line>
<line hits="7">
<code>    if (this[pos] == '!' &amp;&amp; this[pos + 1] == '=') return pos + 2;</code>
<hit count="7" name="&lt;unnamed&gt;"/>
</line>
<line hits="7">
<code>    if (this[pos] == '?' &amp;&amp; this[pos + 1] == '?') return pos + 2;</code>
<hit count="7" name="&lt;unnamed&gt;"/>
</line>
<line hits="7">
<code>    if (this[pos] == '&lt;' &amp;&amp; this[pos + 1] == '&lt;') return pos + 2;</code>
<hit count="7" name="&lt;unnamed&gt;"/>
</line>
<line hits="6">
<code>    if (this[pos] == '&gt;' &amp;&amp; this[pos + 1] == '&gt;') {</code>
<hit count="6" name="&lt;unnamed&gt;"/>
</line>
<line hits="5">
<code>      return pos + (this[pos + 2] == '&gt;' ? 3 : 2);</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    }</code>
</line>
<line hits="2">
<code>    return pos + 1;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  int _skipIdentifier(int pos) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    var p = pos;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>    while (p &lt; _chars.length) {</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      var ch = this[p];</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>      if (_delimitors.contains(ch)) {</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        // end of identifier</code>
</line>
<line hits="1">
<code>        return p;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      }</code>
</line>
<line hits="2">
<code>      p++;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    }</code>
</line>
<line hits="1">
<code>    return p;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  Iterable&lt;Token&gt; getTokens([Map&lt;String, dynamic&gt;? parameters]) sync* {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    var pos = 0;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>    var len = _chars.length;</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    while (pos &lt; len) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      final ch = this[pos];</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>      if (_whitespaces.contains(ch)) {</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        // skip whitespaces</code>
</line>
<line hits="1">
<code>        pos++;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>      } else if (_digits.contains(ch)) {</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        // number literal</code>
</line>
<line hits="2">
<code>        var idx = _skipNumber(pos);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="5">
<code>        yield Token(_chars.sublist(pos, idx).join(), Token.number);</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        pos = idx;</code>
</line>
<line hits="3">
<code>      } else if (_quotes.contains(ch)) {</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        // string literal</code>
</line>
<line hits="2">
<code>        var idx = _skipString(pos);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="5">
<code>        yield Token(_chars.sublist(pos, idx).join(), Token.string);</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        pos = idx;</code>
</line>
<line hits="3">
<code>      } else if (_operators.contains(ch)) {</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        // operator</code>
</line>
<line hits="2">
<code>        var idx = _skipOperator(pos);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="5">
<code>        yield Token(_chars.sublist(pos, idx).join(), Token.operator);</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        pos = idx;</code>
</line>
<line hits="3">
<code>      } else if (_separators.contains(ch)) {</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        // separator</code>
</line>
<line hits="4">
<code>        yield Token(_chars[pos], Token.separator);</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>        pos++;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      } else {</code>
</line>
<line>
<code>        // identifier</code>
</line>
<line hits="2">
<code>        var idx = _skipIdentifier(pos);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>        final identifier = _chars.sublist(pos, idx).join();</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>        if (parameters != null &amp;&amp;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>            identifier.startsWith('@') &amp;&amp;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>            parameters.containsKey(identifier)) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>          yield Token(jsonEncode(parameters[identifier]), Token.parameterValue);</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        } else {</code>
</line>
<line hits="2">
<code>          yield Token(identifier, Token.identifier);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        }</code>
</line>
<line>
<code>        pos = idx;</code>
</line>
<line>
<code>      }</code>
</line>
<line>
<code>    }</code>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
</lines>
<config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
<base href="../"/>
<base href="../"/>
</coverage>
