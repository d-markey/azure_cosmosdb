<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2023-01-29" filename="_context.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.95348835" lines-covered="41" lines-valid="43" package="/client" testname="lcov.info" version="1.5">
<lines>
<line>
<code>import '../_internal/_http_header.dart';</code>
</line>
<line>
<code>import '../base_document.dart';</code>
</line>
<line>
<code>import '../cosmos_db_exceptions.dart';</code>
</line>
<line>
<code>import '../cosmos_db_server.dart';</code>
</line>
<line>
<code>import '../partition/partition_key.dart';</code>
</line>
<line>
<code>import '../permissions/cosmos_db_permission.dart';</code>
</line>
<line>
<code>import '../queries/paging.dart';</code>
</line>
<line>
<code/>
</line>
<line>
<code>const version = '2.0.0';</code>
</line>
<line>
<code/>
</line>
<line>
<code>class Context {</code>
</line>
<line hits="2">
<code>  Context({</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    required this.type,</code>
</line>
<line>
<code>    this.resId,</code>
</line>
<line>
<code>    Map&lt;String, String&gt;? headers,</code>
</line>
<line>
<code>    this.throwOnNotFound = true,</code>
</line>
<line>
<code>    this.paging,</code>
</line>
<line>
<code>    this.partitionKey,</code>
</line>
<line>
<code>    this.token,</code>
</line>
<line>
<code>    this.onForbidden,</code>
</line>
<line>
<code>    this.builder,</code>
</line>
<line>
<code>    this.builders = const {},</code>
</line>
<line>
<code>  }) {</code>
</line>
<line hits="1">
<code>    if (headers != null) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>      _headers = {...headers};</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    }</code>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  final String type;</code>
</line>
<line>
<code>  final String? resId;</code>
</line>
<line>
<code>  final bool throwOnNotFound;</code>
</line>
<line>
<code>  final Paging? paging;</code>
</line>
<line>
<code>  final PartitionKey? partitionKey;</code>
</line>
<line>
<code>  final String? token;</code>
</line>
<line>
<code>  final FutureCallback&lt;CosmosDbPermission?&gt;? onForbidden;</code>
</line>
<line>
<code>  final DocumentBuilder? builder;</code>
</line>
<line>
<code>  final Map&lt;Type, DocumentBuilder&gt; builders;</code>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  Map&lt;String, String&gt;? _headers;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  DocumentBuilder&lt;T&gt; getBuilder&lt;T extends BaseDocument&gt;() {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>    final builder = this.builder ?? builders[T];</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    if (builder == null) throw UnknownDocumentTypeException(T);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    return (data) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      try {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>        return builder(data) as T;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      } catch (ex) {</code>
</line>
<line hits="0">
<code>        throw BadResponseException(ex.toString());</code>
</line>
<line>
<code>      }</code>
</line>
<line hits="1">
<code>    };</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="5">
<code>  void addHeader(String name, String value) =&gt; (_headers ??= {})[name] = value;</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  Context copyWith(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      {Paging? paging,</code>
</line>
<line>
<code>      PartitionKey? partitionKey,</code>
</line>
<line>
<code>      Map&lt;String, String&gt;? headers,</code>
</line>
<line>
<code>      List&lt;String&gt;? removeHeaders,</code>
</line>
<line>
<code>      DocumentBuilder? builder}) {</code>
</line>
<line hits="2">
<code>    final copy = Context(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      type: type,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      resId: resId,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      builder: builder ?? this.builder,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      paging: paging ?? this.paging,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      partitionKey: partitionKey ?? this.partitionKey,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      token: token,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      onForbidden: onForbidden,</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    );</code>
</line>
<line hits="2">
<code>    if (_headers != null) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="5">
<code>      (copy._headers ??= {}).addAll(_headers!);</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    }</code>
</line>
<line hits="1">
<code>    if (headers != null) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>      (copy._headers ??= {}).addAll(headers);</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    }</code>
</line>
<line>
<code>    if (removeHeaders != null) {</code>
</line>
<line hits="0">
<code>      copy._headers?.removeWhere((key, value) =&gt; removeHeaders.contains(key));</code>
</line>
<line>
<code>    }</code>
</line>
<line hits="1">
<code>    return copy;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  Map&lt;String, String&gt; getHeaders() {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>    final headers = {HttpHeader.userAgent: 'AzureCosmosDb.Dart/$version'};</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    if (_headers != null) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>      headers.addAll(_headers!);</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    }</code>
</line>
<line hits="2">
<code>    if (partitionKey != null) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="4">
<code>      headers.addAll(partitionKey!.header);</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    }</code>
</line>
<line hits="4">
<code>    final maxCount = (paging?.maxCount ?? -1);</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    if (maxCount &gt; 0) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>      headers[HttpHeader.msMaxItemCount] = maxCount.toString();</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    }</code>
</line>
<line hits="3">
<code>    final continuation = paging?.continuation ?? '';</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    if (continuation.isNotEmpty) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      headers[HttpHeader.msContinuation] = continuation;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    }</code>
</line>
<line>
<code>    return headers;</code>
</line>
<line>
<code>  }</code>
</line>
<line>
<code>}</code>
</line>
</lines>
<config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
<base href="../"/>
<base href="../"/>
</coverage>
