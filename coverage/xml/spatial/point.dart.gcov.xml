<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2023-05-13" filename="point.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.9117647" lines-covered="31" lines-valid="34" package="/spatial" testname="lcov.info" version="1.5">
<lines>
<line>
<code>import '../indexing/data_type.dart';</code>
</line>
<line>
<code>import '../indexing/geospatial_config.dart';</code>
</line>
<line>
<code>import 'shape.dart';</code>
</line>
<line>
<code/>
</line>
<line>
<code>/// Class represengin a position.</code>
</line>
<line>
<code>class Point extends Shape {</code>
</line>
<line>
<code>  @override</code>
</line>
<line>
<code>  final type = DataType.point;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// The position's X coordinate.</code>
</line>
<line>
<code>  final num? x;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// The position's Y coordinate.</code>
</line>
<line>
<code>  final num? y;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// The position's latitude.</code>
</line>
<line>
<code>  final num? latitude;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// The position's longitude.</code>
</line>
<line>
<code>  final num? longitude;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// The position's altitude.</code>
</line>
<line>
<code>  final num? altitude;</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// `(lat, long)` position.</code>
</line>
<line hits="3">
<code>  const Point.geography(this.latitude, this.longitude, [this.altitude])</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      : assert(latitude != null),</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>        assert(longitude != null),</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        x = null,</code>
</line>
<line hits="1">
<code>        y = null;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// `(x, y)` position.</code>
</line>
<line hits="2">
<code>  const Point.geometry(this.x, this.y, [num? z])</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      : assert(x != null),</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>        assert(y != null),</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        latitude = null,</code>
</line>
<line>
<code>        longitude = null,</code>
</line>
<line hits="1">
<code>        altitude = z;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Coordinates pair, either `(x, y)` or `(long, lat)`.</code>
</line>
<line hits="1">
<code>  @override</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>  List&lt;num&gt; get coordinates =&gt; isGeometry</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="5">
<code>      ? [x!, y!, if (altitude != null) altitude!]</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line hits="5">
<code>      : [longitude!, latitude!, if (altitude != null) altitude!];</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// `true` iif [latitude] and [longitude] are non-null.</code>
</line>
<line hits="4">
<code>  bool get isGeographic =&gt; (latitude != null &amp;&amp; longitude != null);</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// `true` iif [x] and [y] are non-null.</code>
</line>
<line hits="4">
<code>  bool get isGeometry =&gt; (x != null &amp;&amp; y != null);</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="0">
<code>  @override</code>
</line>
<line hits="0">
<code>  Iterable&lt;Iterable&lt;Point&gt;&gt; get paths =&gt; [</code>
</line>
<line hits="0">
<code>        [this]</code>
</line>
<line>
<code>      ];</code>
</line>
<line>
<code/>
</line>
<line>
<code>  /// The position's Z coordinate. Returns the [altitude] (which may be `null`)</code>
</line>
<line>
<code>  /// if the position is geometrical, `null` otherwise.</code>
</line>
<line hits="4">
<code>  num? get z =&gt; isGeometry ? altitude : null;</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Hydrates a new [Point] instance using the JSON data in [geoJson].</code>
</line>
<line hits="1">
<code>  static Point fromGeoJson(Map geoJson, GeospatialConfig config) =&gt;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      Shape.fromGeoJson&lt;Point&gt;(geoJson, config);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  static Point loadGeographyCoords(Iterable coords) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    final c = (coords is List) ? coords : coords.toList();</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    final lat = c[1];</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    final long = c[0];</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>    final alt = (c.length &gt;= 3) ? c[2] : null;</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    return Point.geography(lat, long, alt);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  static Point loadGeometryCoords(Iterable coords) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    final c = (coords is List) ? coords : coords.toList();</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    final x = c[0];</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    final y = c[1];</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>    final alt = (c.length &gt;= 3) ? c[2] : null;</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    return Point.geometry(x, y, alt);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
</lines>
<config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
<base href="../"/>
<base href="../"/>
</coverage>
