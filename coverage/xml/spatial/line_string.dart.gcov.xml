<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2023-10-12" filename="line_string.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="1.0" lines-covered="22" lines-valid="22" package="/spatial" testname="lcov.info" version="1.5">
<lines>
<line>
<code>import '../_internal/_linq_extensions.dart';</code>
</line>
<line>
<code>import '../indexing/data_type.dart';</code>
</line>
<line>
<code>import '../indexing/geospatial_config.dart';</code>
</line>
<line>
<code>import 'point.dart';</code>
</line>
<line>
<code>import 'shape.dart';</code>
</line>
<line>
<code/>
</line>
<line>
<code>/// Class representing a line.</code>
</line>
<line>
<code>class LineString extends Shape {</code>
</line>
<line hits="1">
<code>  final _points = &lt;Point&gt;[];</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  @override</code>
</line>
<line>
<code>  final type = DataType.lineString;</code>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  LineString();</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Returns a list where each entry represents a point's coordinates.</code>
</line>
<line hits="1">
<code>  @override</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="6">
<code>  List&lt;List&lt;num&gt;&gt; get coordinates =&gt; points.map((p) =&gt; p.coordinates).toList();</code>
<hit count="6" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// `true` iif the line string contains no points.</code>
</line>
<line hits="3">
<code>  bool get isEmpty =&gt; points.isEmpty;</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// `true` iif the line string contains one or more points.</code>
</line>
<line hits="3">
<code>  bool get isNotEmpty =&gt; points.isNotEmpty;</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Collection of paths. A `LineString` has only one path which contains all</code>
</line>
<line>
<code>  /// of its points.</code>
</line>
<line hits="1">
<code>  @override</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>  Iterable&lt;Iterable&lt;Point&gt;&gt; get paths =&gt; [points];</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Collection of points making up the line string.</code>
</line>
<line hits="4">
<code>  Iterable&lt;Point&gt; get points =&gt; _points.asIterable();</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Collection of points making up the line string, in reverse order.</code>
</line>
<line hits="4">
<code>  Iterable&lt;Point&gt; get reversed =&gt; _points.reversed;</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Adds a point to the line string.</code>
</line>
<line hits="4">
<code>  void add(Point point) =&gt; _points.add(point);</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Adds a set of points to the line string.</code>
</line>
<line hits="4">
<code>  void addAll(Iterable&lt;Point&gt; points) =&gt; _points.addAll(points);</code>
<hit count="4" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  static LineString fromGeoJson(Map geoJson, GeospatialConfig config) =&gt;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      Shape.fromGeoJson&lt;LineString&gt;(geoJson, config);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="3">
<code>  static LineString loadGeographyCoords(Iterable coords) =&gt; LineString()</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    ..addAll(</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>      coords.cast&lt;List&gt;().map(Point.loadGeographyCoords),</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    );</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="3">
<code>  static LineString loadGeometryCoords(Iterable coords) =&gt; LineString()</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    ..addAll(</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>      coords.cast&lt;List&gt;().map(Point.loadGeometryCoords),</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    );</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
</lines>
<config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
<base href="../"/>
<base href="../"/>
</coverage>
