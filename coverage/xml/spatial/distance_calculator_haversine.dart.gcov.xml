<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2023-10-12" filename="distance_calculator_haversine.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="1.0" lines-covered="14" lines-valid="14" package="/spatial" testname="lcov.info" version="1.5">
<lines>
<line>
<code>import 'dart:math' as math;</code>
</line>
<line>
<code/>
</line>
<line>
<code>import 'distance_calculator.dart';</code>
</line>
<line>
<code>import 'point.dart';</code>
</line>
<line>
<code/>
</line>
<line>
<code>/// The Earth's radius, in kilometers.</code>
</line>
<line>
<code>const double earthRadiusInKm = 6371;</code>
</line>
<line>
<code/>
</line>
<line>
<code>/// Distance calculator for points in latitude/longitude coordinates on Earth.</code>
</line>
<line>
<code>const earthDistanceCalculator = DistanceCalculatorHaversine(earthRadiusInKm);</code>
</line>
<line>
<code/>
</line>
<line>
<code>/// Distance calculator for points on a sphere (latitude/longitude coordinates),</code>
</line>
<line>
<code>/// based on the Haversine algorithm.</code>
</line>
<line>
<code>class DistanceCalculatorHaversine extends DistanceCalculator {</code>
</line>
<line hits="1">
<code>  const DistanceCalculatorHaversine(this.radius);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// The sphere's radius.</code>
</line>
<line>
<code>  final double radius;</code>
</line>
<line>
<code/>
</line>
<line hits="3">
<code>  static double _rad(num degrees) =&gt; degrees * math.pi / 180;</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>  static double _sin(num degrees) =&gt; math.sin(_rad(degrees));</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>  static double _cos(num degrees) =&gt; math.cos(_rad(degrees));</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  /// Computes the distance between [from] and [to] positions. Returns the</code>
</line>
<line>
<code>  /// great-circle distance using 'haversine' formula. [Point.altitude]</code>
</line>
<line>
<code>  /// values are ignored. [from] and [to] positions must be geography-based, i.e.</code>
</line>
<line>
<code>  /// their latitude and longitude are both set; otherwise `null` is returned.</code>
</line>
<line hits="1">
<code>  @override</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  double? distance(Point from, Point to) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>    if (!from.isGeographic || !to.isGeographic) return null;</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="6">
<code>    final dLatSin = _sin((to.latitude! - from.latitude!) / 2);</code>
<hit count="6" name="&lt;unnamed&gt;"/>
</line>
<line hits="6">
<code>    final dLongSin = _sin((to.longitude! - from.longitude!) / 2);</code>
<hit count="6" name="&lt;unnamed&gt;"/>
</line>
<line hits="5">
<code>    final cosSq = _cos(from.latitude!) * _cos(to.latitude!);</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="5">
<code>    final a = dLatSin * dLatSin + cosSq * dLongSin * dLongSin;</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line hits="5">
<code>    final c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a));</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>    return c * radius;</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>  }</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>}</code>
</line>
</lines>
<config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
<base href="../"/>
<base href="../"/>
</coverage>
